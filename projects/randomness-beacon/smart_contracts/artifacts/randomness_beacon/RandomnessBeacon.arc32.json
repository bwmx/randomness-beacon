{
    "hints": {
        "createApplication(byte[32])void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "updateApplication()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "deleteApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "createRequest(address,uint64,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cancelRequest(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "completeRequest(uint64,byte[80])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getCosts()(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateManager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteManager()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "manager()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unpause()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePauser(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pauser()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 6,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "_manager": {
                    "type": "bytes",
                    "key": "manager"
                },
                "_pauser": {
                    "type": "bytes",
                    "key": "pauser"
                },
                "currentRequestId": {
                    "type": "bytes",
                    "key": "currentRequestId"
                },
                "paused": {
                    "type": "bytes",
                    "key": "paused"
                },
                "publicKey": {
                    "type": "bytes",
                    "key": "publicKey"
                },
                "totalPendingRequests": {
                    "type": "bytes",
                    "key": "totalPendingRequests"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "RandomnessBeacon",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "publicKey",
                        "desc": "the public key used to verify VRF proofs we will accept"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createRequest",
                "args": [
                    {
                        "type": "address",
                        "name": "requesterAddress",
                        "desc": "who the request is on behalf of?"
                    },
                    {
                        "type": "uint64",
                        "name": "round",
                        "desc": "the round to request the randomness for"
                    },
                    {
                        "type": "pay",
                        "name": "costsPayment",
                        "desc": "payment covering txnFees + boxCost"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "a unique request ID to be used to identify the request"
                }
            },
            {
                "name": "cancelRequest",
                "args": [
                    {
                        "type": "uint64",
                        "name": "requestId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "completeRequest",
                "args": [
                    {
                        "type": "uint64",
                        "name": "requestId",
                        "desc": "the ID of the VRF request"
                    },
                    {
                        "type": "byte[80]",
                        "name": "proof",
                        "desc": "the VRF proof output using the `targetRound` block seed of the targeted RandomnessBeaconRequest"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getCosts",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)"
                },
                "desc": "\nConvenience function to get associated costs with using the beacon service"
            },
            {
                "name": "updateManager",
                "args": [
                    {
                        "type": "address",
                        "name": "newManager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the manager of this contract"
            },
            {
                "name": "deleteManager",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delete the manager of this contract"
            },
            {
                "name": "manager",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address",
                    "desc": "The current manager of this contract"
                },
                "desc": "Convenience function to get the current manager of this contract"
            },
            {
                "name": "pause",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "unpause",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updatePauser",
                "args": [
                    {
                        "type": "address",
                        "name": "_newPauser"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "pauser",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address",
                    "desc": "The current pauser"
                },
                "desc": "Convenience function to get the pauser"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}