/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"ExampleCaller","structs":{},"methods":[{"name":"createApplication","args":[{"type":"application","name":"beaconApp"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"test1","args":[{"type":"pay","name":"costsPayment"}],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"fulfillRandomness","args":[{"type":"uint64","name":"requestId"},{"type":"address","name":"requesterAddress"},{"type":"byte[64]","name":"output"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"beaconApp":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmVhY29uQXBw"},"totalFulfilled":{"keyType":"AVMString","valueType":"uint64","key":"dG90YWxGdWxmaWxsZWQ="},"output":{"keyType":"AVMString","valueType":"byte[64]","key":"b3V0cHV0"},"requestId":{"keyType":"AVMString","valueType":"uint64","key":"cmVxdWVzdElk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[239],"errorMessage":"Bytes has valid prefix"},{"pc":[92,113,139],"errorMessage":"OnCompletion is not NoOp"},{"pc":[172],"errorMessage":"application exists"},{"pc":[143],"errorMessage":"can only call when creating"},{"pc":[95,116],"errorMessage":"can only call when not creating"},{"pc":[169,199,260],"errorMessage":"check GlobalState exists"},{"pc":[126],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAw50b3RhbEZ1bGZpbGxlZAliZWFjb25BcHAEFR98dTEYQAAMKIAIAAAAAAAAAABnMRtBAByCAwTxxvDcBM1FTroEQsv+TDYaAI4DADEAFwACI0MxGRREMRhENhoBNhoCNhoDiACHIkMxGRREMRhEMRYiCUk4ECISRIgAISpMULAiQzEZFEQxGBRENhoBF8AyiAACIkOKAQApi/9niYoBASMpZURyCESL/zgIMgYiCBaxTLIITLIHIrIQI7IBtiMpZUQxAIAE2Jjut7IashpLAbIashiBBrIQI7IBs7cBPklXBABMVwAEKhJETFCJigMAgAZvdXRwdXSL/2cjKGVEFyIIFihMZ4k=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ExampleCaller contract
 */
export type ExampleCallerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(application)void': {
      beaconApp: bigint
    }
    'test1(pay)(uint64,uint64)': {
      costsPayment: AppMethodCallTransactionArgument
    }
    'fulfillRandomness(uint64,address,byte[64])void': {
      requestId: bigint | number
      requesterAddress: string
      output: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(application)void': [beaconApp: bigint]
    'test1(pay)(uint64,uint64)': [costsPayment: AppMethodCallTransactionArgument]
    'fulfillRandomness(uint64,address,byte[64])void': [requestId: bigint | number, requesterAddress: string, output: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type ExampleCallerReturns = {
  'createApplication(application)void': void
  'test1(pay)(uint64,uint64)': [bigint, bigint]
  'fulfillRandomness(uint64,address,byte[64])void': void
}

/**
 * Defines the types of available calls and state of the ExampleCaller smart contract.
 */
export type ExampleCallerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(application)void' | 'createApplication', {
      argsObj: ExampleCallerArgs['obj']['createApplication(application)void']
      argsTuple: ExampleCallerArgs['tuple']['createApplication(application)void']
      returns: ExampleCallerReturns['createApplication(application)void']
    }>
    & Record<'test1(pay)(uint64,uint64)' | 'test1', {
      argsObj: ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)']
      argsTuple: ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']
      returns: ExampleCallerReturns['test1(pay)(uint64,uint64)']
    }>
    & Record<'fulfillRandomness(uint64,address,byte[64])void' | 'fulfillRandomness', {
      argsObj: ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void']
      argsTuple: ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']
      returns: ExampleCallerReturns['fulfillRandomness(uint64,address,byte[64])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        beaconApp: bigint
        totalFulfilled: bigint
        output: Uint8Array
        requestId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ExampleCallerSignatures = keyof ExampleCallerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ExampleCallerNonVoidMethodSignatures = keyof ExampleCallerTypes['methods'] extends infer T ? T extends keyof ExampleCallerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ExampleCaller smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ExampleCallerSignatures> = ExampleCallerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ExampleCaller smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ExampleCallerSignatures> = ExampleCallerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ExampleCallerTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ExampleCallerCreateCallParams =
  | Expand<CallParams<ExampleCallerArgs['obj']['createApplication(application)void'] | ExampleCallerArgs['tuple']['createApplication(application)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ExampleCallerArgs['obj']['createApplication(application)void'] | ExampleCallerArgs['tuple']['createApplication(application)void']> & {method: 'createApplication(application)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ExampleCallerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ExampleCallerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ExampleCaller smart contract
 */
export abstract class ExampleCallerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ExampleCallerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(application)void':
            return ExampleCallerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ExampleCaller smart contract using the createApplication(application)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ExampleCallerArgs['obj']['createApplication(application)void'] | ExampleCallerArgs['tuple']['createApplication(application)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(application)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.beaconApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the test1(pay)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static test1(params: CallParams<ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)'] | ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'test1(pay)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.costsPayment],
    }
  }
  /**
   * Constructs a no op call for the fulfillRandomness(uint64,address,byte[64])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fulfillRandomness(params: CallParams<ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void'] | ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fulfillRandomness(uint64,address,byte[64])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId, params.args.requesterAddress, params.args.output],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ExampleCaller smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ExampleCallerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ExampleCallerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ExampleCallerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ExampleCallerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ExampleCaller smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ExampleCallerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ExampleCallerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ExampleCallerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ExampleCallerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExampleCaller smart contract using the createApplication(application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ExampleCallerArgs['obj']['createApplication(application)void'] | ExampleCallerArgs['tuple']['createApplication(application)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(ExampleCallerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExampleCaller smart contract using the createApplication(application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ExampleCallerArgs['obj']['createApplication(application)void'] | ExampleCallerArgs['tuple']['createApplication(application)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(ExampleCallerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExampleCaller smart contract using an ABI method call using the createApplication(application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ExampleCallerArgs['obj']['createApplication(application)void'] | ExampleCallerArgs['tuple']['createApplication(application)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(ExampleCallerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ExampleCallerReturns['createApplication(application)void']) }, appClient: new ExampleCallerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ExampleCaller smart contract
 */
export class ExampleCallerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ExampleCallerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ExampleCaller app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ExampleCallerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ExampleCallerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ExampleCallerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ExampleCallerClient> {
    return new ExampleCallerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ExampleCallerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ExampleCallerClient> {
    return new ExampleCallerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ExampleCaller smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ExampleCaller smart contract using the `test1(pay)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    test1: (params: CallParams<ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)'] | ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ExampleCallerParamsFactory.test1(params))
    },

    /**
     * Makes a call to the ExampleCaller smart contract using the `fulfillRandomness(uint64,address,byte[64])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fulfillRandomness: (params: CallParams<ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void'] | ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ExampleCallerParamsFactory.fulfillRandomness(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ExampleCaller smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ExampleCaller smart contract using the `test1(pay)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    test1: (params: CallParams<ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)'] | ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ExampleCallerParamsFactory.test1(params))
    },

    /**
     * Makes a call to the ExampleCaller smart contract using the `fulfillRandomness(uint64,address,byte[64])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fulfillRandomness: (params: CallParams<ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void'] | ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ExampleCallerParamsFactory.fulfillRandomness(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ExampleCaller smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ExampleCaller smart contract using the `test1(pay)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    test1: async (params: CallParams<ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)'] | ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ExampleCallerParamsFactory.test1(params))
      return {...result, return: result.return as unknown as (undefined | ExampleCallerReturns['test1(pay)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ExampleCaller smart contract using the `fulfillRandomness(uint64,address,byte[64])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fulfillRandomness: async (params: CallParams<ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void'] | ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ExampleCallerParamsFactory.fulfillRandomness(params))
      return {...result, return: result.return as unknown as (undefined | ExampleCallerReturns['fulfillRandomness(uint64,address,byte[64])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ExampleCallerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ExampleCaller app
   */
  state = {
    /**
     * Methods to access global state for the current ExampleCaller app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          beaconApp: result.beaconApp,
          totalFulfilled: result.totalFulfilled,
          output: result.output,
          requestId: result.requestId,
        }
      },
      /**
       * Get the current value of the beaconApp key in global state
       */
      beaconApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("beaconApp")) as bigint | undefined },
      /**
       * Get the current value of the totalFulfilled key in global state
       */
      totalFulfilled: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalFulfilled")) as bigint | undefined },
      /**
       * Get the current value of the output key in global state
       */
      output: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("output")) as Uint8Array | undefined },
      /**
       * Get the current value of the requestId key in global state
       */
      requestId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("requestId")) as bigint | undefined },
    },
  }

  public newGroup(): ExampleCallerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a test1(pay)(uint64,uint64) method call against the ExampleCaller contract
       */
      test1(params: CallParams<ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)'] | ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.test1(params)))
        resultMappers.push((v) => client.decodeReturnValue('test1(pay)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a fulfillRandomness(uint64,address,byte[64])void method call against the ExampleCaller contract
       */
      fulfillRandomness(params: CallParams<ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void'] | ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fulfillRandomness(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ExampleCaller contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ExampleCallerComposer
  }
}
export type ExampleCallerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the test1(pay)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  test1(params?: CallParams<ExampleCallerArgs['obj']['test1(pay)(uint64,uint64)'] | ExampleCallerArgs['tuple']['test1(pay)(uint64,uint64)']>): ExampleCallerComposer<[...TReturns, ExampleCallerReturns['test1(pay)(uint64,uint64)'] | undefined]>

  /**
   * Calls the fulfillRandomness(uint64,address,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fulfillRandomness(params?: CallParams<ExampleCallerArgs['obj']['fulfillRandomness(uint64,address,byte[64])void'] | ExampleCallerArgs['tuple']['fulfillRandomness(uint64,address,byte[64])void']>): ExampleCallerComposer<[...TReturns, ExampleCallerReturns['fulfillRandomness(uint64,address,byte[64])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ExampleCaller smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ExampleCallerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ExampleCallerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ExampleCallerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ExampleCallerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ExampleCallerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ExampleCallerComposerResults<TReturns>>
}
export type ExampleCallerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

