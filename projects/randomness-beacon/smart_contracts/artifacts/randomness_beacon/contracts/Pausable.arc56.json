{
    "name": "Pausable",
    "structs": {},
    "methods": [
        {
            "name": "pause",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unpause",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updatePauser",
            "args": [
                {
                    "type": "address",
                    "name": "_newPauser"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pauser",
            "args": [],
            "returns": {
                "type": "address",
                "desc": "The current pauser"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Convenience function to get the pauser",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "_pauser": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cGF1c2Vy"
                },
                "paused": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "cGF1c2Vk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        80,
                        101,
                        116,
                        128
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        145
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        83,
                        104,
                        119,
                        131
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        151,
                        193
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "only pauser can call this method"
                },
                {
                    "pc": [
                        184
                    ],
                    "errorMessage": "pauser cannot be zero address"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrICJwYXVzZXIiICJwYXVzZWQiIDB4MDAKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czo4CiAgICAvLyBrZXk6ICdwYXVzZXInLAogICAgYnl0ZWNfMCAvLyAicGF1c2VyIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjkKICAgIC8vIGluaXRpYWxWYWx1ZTogbmV3IGFyYzQuQWRkcmVzcyhHbG9iYWwuY3JlYXRvckFkZHJlc3MpLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6Ny0xMAogICAgLy8gcHJpdmF0ZSBfcGF1c2VyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7CiAgICAvLyAgIGtleTogJ3BhdXNlcicsCiAgICAvLyAgIGluaXRpYWxWYWx1ZTogbmV3IGFyYzQuQWRkcmVzcyhHbG9iYWwuY3JlYXRvckFkZHJlc3MpLAogICAgLy8gfSkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6MTMKICAgIC8vIHBhdXNlZCA9IEdsb2JhbFN0YXRlPGFyYzQuQm9vbD4oeyBrZXk6ICdwYXVzZWQnLCBpbml0aWFsVmFsdWU6IG5ldyBhcmM0LkJvb2woZmFsc2UpIH0pCiAgICBieXRlY18xIC8vICJwYXVzZWQiCiAgICBieXRlY18yIC8vIDB4MDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgUGF1c2FibGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTEKICAgIHB1c2hieXRlc3MgMHgwMTc4Zjk0YiAweDFiNTI5ZGU4IDB4MGNhZGQxNjMgMHhiMGQ5NTNiMyAvLyBtZXRob2QgInBhdXNlKCl2b2lkIiwgbWV0aG9kICJ1bnBhdXNlKCl2b2lkIiwgbWV0aG9kICJ1cGRhdGVQYXVzZXIoYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJwYXVzZXIoKWFkZHJlc3MiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3BhdXNlX3JvdXRlQDUgbWFpbl91bnBhdXNlX3JvdXRlQDYgbWFpbl91cGRhdGVQYXVzZXJfcm91dGVANyBtYWluX3BhdXNlcl9yb3V0ZUA4CgptYWluX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIFBhdXNhYmxlIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18xIC8vIDAKICAgIHJldHVybgoKbWFpbl9wYXVzZXJfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czo1MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBwYXVzZXIKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVQYXVzZXJfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czozNwogICAgLy8gdXBkYXRlUGF1c2VyKF9uZXdQYXVzZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIFBhdXNhYmxlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjM3CiAgICAvLyB1cGRhdGVQYXVzZXIoX25ld1BhdXNlcjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBjYWxsc3ViIHVwZGF0ZVBhdXNlcgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl91bnBhdXNlX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6MzEKICAgIC8vIHVucGF1c2UoKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdW5wYXVzZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9wYXVzZV9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjIzCiAgICAvLyBwYXVzZSgpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBwYXVzZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIFBhdXNhYmxlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6OlBhdXNhYmxlLm9ubHlQYXVzZXIoKSAtPiB2b2lkOgpvbmx5UGF1c2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjgKICAgIC8vIGtleTogJ3BhdXNlcicsCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAicGF1c2VyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czoyMAogICAgLy8gYXNzZXJ0KHRoaXMuX3BhdXNlci52YWx1ZS5uYXRpdmUgPT09IFR4bi5zZW5kZXIsIEVSUl9PTkxZX1BBVVNFUikKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gb25seSBwYXVzZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czo6UGF1c2FibGUucGF1c2UoKSAtPiB2b2lkOgpwYXVzZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czoyNAogICAgLy8gdGhpcy5vbmx5UGF1c2VyKCkKICAgIGNhbGxzdWIgb25seVBhdXNlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjEzCiAgICAvLyBwYXVzZWQgPSBHbG9iYWxTdGF0ZTxhcmM0LkJvb2w+KHsga2V5OiAncGF1c2VkJywgaW5pdGlhbFZhbHVlOiBuZXcgYXJjNC5Cb29sKGZhbHNlKSB9KQogICAgYnl0ZWNfMSAvLyAicGF1c2VkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjI2CiAgICAvLyB0aGlzLnBhdXNlZC52YWx1ZSA9IG5ldyBhcmM0LkJvb2wodHJ1ZSkKICAgIHB1c2hieXRlcyAweDgwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjpQYXVzYWJsZS51bnBhdXNlKCkgLT4gdm9pZDoKdW5wYXVzZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czozMgogICAgLy8gdGhpcy5vbmx5UGF1c2VyKCkKICAgIGNhbGxzdWIgb25seVBhdXNlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjEzCiAgICAvLyBwYXVzZWQgPSBHbG9iYWxTdGF0ZTxhcmM0LkJvb2w+KHsga2V5OiAncGF1c2VkJywgaW5pdGlhbFZhbHVlOiBuZXcgYXJjNC5Cb29sKGZhbHNlKSB9KQogICAgYnl0ZWNfMSAvLyAicGF1c2VkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjM0CiAgICAvLyB0aGlzLnBhdXNlZC52YWx1ZSA9IG5ldyBhcmM0LkJvb2woZmFsc2UpCiAgICBieXRlY18yIC8vIDB4MDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6OlBhdXNhYmxlLnVwZGF0ZVBhdXNlcihfbmV3UGF1c2VyOiBieXRlcykgLT4gdm9pZDoKdXBkYXRlUGF1c2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjM3CiAgICAvLyB1cGRhdGVQYXVzZXIoX25ld1BhdXNlcjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czozOAogICAgLy8gdGhpcy5vbmx5UGF1c2VyKCkKICAgIGNhbGxzdWIgb25seVBhdXNlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjQwCiAgICAvLyBhc3NlcnQoX25ld1BhdXNlci5uYXRpdmUgIT09IEdsb2JhbC56ZXJvQWRkcmVzcywgRVJSX1pFUk9fQUREUkVTUykKICAgIGZyYW1lX2RpZyAtMQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIHBhdXNlciBjYW5ub3QgYmUgemVybyBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL3BhdXNhYmxlLmFsZ28udHM6OAogICAgLy8ga2V5OiAncGF1c2VyJywKICAgIGJ5dGVjXzAgLy8gInBhdXNlciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czo0MQogICAgLy8gdGhpcy5fcGF1c2VyLnZhbHVlID0gX25ld1BhdXNlcgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjpQYXVzYWJsZS5wYXVzZXIoKSAtPiBieXRlczoKcGF1c2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9wYXVzYWJsZS5hbGdvLnRzOjgKICAgIC8vIGtleTogJ3BhdXNlcicsCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAicGF1c2VyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvcGF1c2FibGUuYWxnby50czo1MgogICAgLy8gcmV0dXJuIHRoaXMuX3BhdXNlci52YWx1ZQogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAmAwZwYXVzZXIGcGF1c2VkAQAxGEAABygyCWcpKmcxG0EAYYIEBAF4+UsEG1Kd6AQMrdFjBLDZU7M2GgCOBAAyACYAFwACI0MxGRREMRhEiABngAQVH3x1TFCwIkMxGRREMRhENhoBiAA+IkMxGRREMRhEiAArIkMxGRREMRhEiAAWIkMxGUD/vTEYFEQiQyMoZUQxABJEiYj/9CmAAYBniYj/6ykqZ4mKAQCI/+GL/zIDE0Qoi/9niSMoZUSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}