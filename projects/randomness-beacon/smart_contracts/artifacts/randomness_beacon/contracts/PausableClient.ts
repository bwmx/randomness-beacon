/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Pausable","structs":{},"methods":[{"name":"pause","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"unpause","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updatePauser","args":[{"type":"address","name":"_newPauser"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"pauser","args":[],"returns":{"type":"address","desc":"The current pauser"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Convenience function to get the pauser","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"_pauser":{"keyType":"AVMString","valueType":"address","key":"cGF1c2Vy"},"paused":{"keyType":"AVMString","valueType":"bool","key":"cGF1c2Vk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[80,101,116,128],"errorMessage":"OnCompletion is not NoOp"},{"pc":[145],"errorMessage":"can only call when creating"},{"pc":[83,104,119,131],"errorMessage":"can only call when not creating"},{"pc":[151,193],"errorMessage":"check GlobalState exists"},{"pc":[155],"errorMessage":"only pauser can call this method"},{"pc":[184],"errorMessage":"pauser cannot be zero address"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAwZwYXVzZXIGcGF1c2VkAQAxGEAABygyCWcpKmcxG0EAYYIEBAF4+UsEG1Kd6AQMrdFjBLDZU7M2GgCOBAAyACYAFwACI0MxGRREMRhEiABngAQVH3x1TFCwIkMxGRREMRhENhoBiAA+IkMxGRREMRhEiAArIkMxGRREMRhEiAAWIkMxGUD/vTEYFEQiQyMoZUQxABJEiYj/9CmAAYBniYj/6ykqZ4mKAQCI/+GL/zIDE0Qoi/9niSMoZUSJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Pausable contract
 */
export type PausableArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'pause()void': Record<string, never>
    'unpause()void': Record<string, never>
    'updatePauser(address)void': {
      _newPauser: string
    }
    'pauser()address': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'pause()void': []
    'unpause()void': []
    'updatePauser(address)void': [_newPauser: string]
    'pauser()address': []
  }
}

/**
 * The return type for each method
 */
export type PausableReturns = {
  'pause()void': void
  'unpause()void': void
  'updatePauser(address)void': void
  'pauser()address': string
}

/**
 * Defines the types of available calls and state of the Pausable smart contract.
 */
export type PausableTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'pause()void' | 'pause', {
      argsObj: PausableArgs['obj']['pause()void']
      argsTuple: PausableArgs['tuple']['pause()void']
      returns: PausableReturns['pause()void']
    }>
    & Record<'unpause()void' | 'unpause', {
      argsObj: PausableArgs['obj']['unpause()void']
      argsTuple: PausableArgs['tuple']['unpause()void']
      returns: PausableReturns['unpause()void']
    }>
    & Record<'updatePauser(address)void' | 'updatePauser', {
      argsObj: PausableArgs['obj']['updatePauser(address)void']
      argsTuple: PausableArgs['tuple']['updatePauser(address)void']
      returns: PausableReturns['updatePauser(address)void']
    }>
    & Record<'pauser()address' | 'pauser', {
      argsObj: PausableArgs['obj']['pauser()address']
      argsTuple: PausableArgs['tuple']['pauser()address']
      /**
       * The current pauser
       */
      returns: PausableReturns['pauser()address']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        _pauser: string
        paused: boolean
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PausableSignatures = keyof PausableTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PausableNonVoidMethodSignatures = keyof PausableTypes['methods'] extends infer T ? T extends keyof PausableTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Pausable smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PausableSignatures> = PausableTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Pausable smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PausableSignatures> = PausableTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PausableTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PausableCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PausableDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PausableCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Pausable smart contract
 */
export abstract class PausableParamsFactory {
  /**
   * Constructs a no op call for the pause()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pause(params: CallParams<PausableArgs['obj']['pause()void'] | PausableArgs['tuple']['pause()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpause(params: CallParams<PausableArgs['obj']['unpause()void'] | PausableArgs['tuple']['unpause()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updatePauser(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePauser(params: CallParams<PausableArgs['obj']['updatePauser(address)void'] | PausableArgs['tuple']['updatePauser(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePauser(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args._newPauser],
    }
  }
  /**
   * Constructs a no op call for the pauser()address ABI method
   *
   * Convenience function to get the pauser
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauser(params: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pauser()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Pausable smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PausableFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PausableFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PausableClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PausableClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Pausable smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PausableDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PausableClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pausable smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pausable smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pausable smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PausableClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Pausable smart contract
 */
export class PausableClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PausableClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Pausable app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PausableClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PausableNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PausableClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PausableClient> {
    return new PausableClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PausableClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PausableClient> {
    return new PausableClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Pausable smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Pausable smart contract using the `pause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pause: (params: CallParams<PausableArgs['obj']['pause()void'] | PausableArgs['tuple']['pause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PausableParamsFactory.pause(params))
    },

    /**
     * Makes a call to the Pausable smart contract using the `unpause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpause: (params: CallParams<PausableArgs['obj']['unpause()void'] | PausableArgs['tuple']['unpause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PausableParamsFactory.unpause(params))
    },

    /**
     * Makes a call to the Pausable smart contract using the `updatePauser(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePauser: (params: CallParams<PausableArgs['obj']['updatePauser(address)void'] | PausableArgs['tuple']['updatePauser(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PausableParamsFactory.updatePauser(params))
    },

    /**
     * Makes a call to the Pausable smart contract using the `pauser()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the pauser
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current pauser
     */
    pauser: (params: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PausableParamsFactory.pauser(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Pausable smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Pausable smart contract using the `pause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pause: (params: CallParams<PausableArgs['obj']['pause()void'] | PausableArgs['tuple']['pause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PausableParamsFactory.pause(params))
    },

    /**
     * Makes a call to the Pausable smart contract using the `unpause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpause: (params: CallParams<PausableArgs['obj']['unpause()void'] | PausableArgs['tuple']['unpause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PausableParamsFactory.unpause(params))
    },

    /**
     * Makes a call to the Pausable smart contract using the `updatePauser(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePauser: (params: CallParams<PausableArgs['obj']['updatePauser(address)void'] | PausableArgs['tuple']['updatePauser(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PausableParamsFactory.updatePauser(params))
    },

    /**
     * Makes a call to the Pausable smart contract using the `pauser()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the pauser
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current pauser
     */
    pauser: (params: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PausableParamsFactory.pauser(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Pausable smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Pausable smart contract using the `pause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pause: async (params: CallParams<PausableArgs['obj']['pause()void'] | PausableArgs['tuple']['pause()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PausableParamsFactory.pause(params))
      return {...result, return: result.return as unknown as (undefined | PausableReturns['pause()void'])}
    },

    /**
     * Makes a call to the Pausable smart contract using the `unpause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpause: async (params: CallParams<PausableArgs['obj']['unpause()void'] | PausableArgs['tuple']['unpause()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PausableParamsFactory.unpause(params))
      return {...result, return: result.return as unknown as (undefined | PausableReturns['unpause()void'])}
    },

    /**
     * Makes a call to the Pausable smart contract using the `updatePauser(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePauser: async (params: CallParams<PausableArgs['obj']['updatePauser(address)void'] | PausableArgs['tuple']['updatePauser(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PausableParamsFactory.updatePauser(params))
      return {...result, return: result.return as unknown as (undefined | PausableReturns['updatePauser(address)void'])}
    },

    /**
     * Makes a call to the Pausable smart contract using the `pauser()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the pauser
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current pauser
     */
    pauser: async (params: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PausableParamsFactory.pauser(params))
      return {...result, return: result.return as unknown as (undefined | PausableReturns['pauser()address'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PausableClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Pausable smart contract using the `pauser()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Convenience function to get the pauser
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current pauser
   */
  async pauser(params: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']> = {args: []}) {
    const result = await this.appClient.send.call(PausableParamsFactory.pauser(params))
    return result.return as unknown as PausableReturns['pauser()address']
  }

  /**
   * Methods to access state for the current Pausable app
   */
  state = {
    /**
     * Methods to access global state for the current Pausable app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          _pauser: result._pauser,
          paused: result.paused,
        }
      },
      /**
       * Get the current value of the _pauser key in global state
       */
      _pauser: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("_pauser")) as string | undefined },
      /**
       * Get the current value of the paused key in global state
       */
      paused: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("paused")) as boolean | undefined },
    },
  }

  public newGroup(): PausableComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a pause()void method call against the Pausable contract
       */
      pause(params: CallParams<PausableArgs['obj']['pause()void'] | PausableArgs['tuple']['pause()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pause(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unpause()void method call against the Pausable contract
       */
      unpause(params: CallParams<PausableArgs['obj']['unpause()void'] | PausableArgs['tuple']['unpause()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpause(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePauser(address)void method call against the Pausable contract
       */
      updatePauser(params: CallParams<PausableArgs['obj']['updatePauser(address)void'] | PausableArgs['tuple']['updatePauser(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePauser(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pauser()address method call against the Pausable contract
       */
      pauser(params: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauser(params)))
        resultMappers.push((v) => client.decodeReturnValue('pauser()address', v))
        return this
      },
      /**
       * Add a clear state call to the Pausable contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PausableComposer
  }
}
export type PausableComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the pause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pause(params?: CallParams<PausableArgs['obj']['pause()void'] | PausableArgs['tuple']['pause()void']>): PausableComposer<[...TReturns, PausableReturns['pause()void'] | undefined]>

  /**
   * Calls the unpause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpause(params?: CallParams<PausableArgs['obj']['unpause()void'] | PausableArgs['tuple']['unpause()void']>): PausableComposer<[...TReturns, PausableReturns['unpause()void'] | undefined]>

  /**
   * Calls the updatePauser(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePauser(params?: CallParams<PausableArgs['obj']['updatePauser(address)void'] | PausableArgs['tuple']['updatePauser(address)void']>): PausableComposer<[...TReturns, PausableReturns['updatePauser(address)void'] | undefined]>

  /**
   * Calls the pauser()address ABI method.
   *
   * Convenience function to get the pauser
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauser(params?: CallParams<PausableArgs['obj']['pauser()address'] | PausableArgs['tuple']['pauser()address']>): PausableComposer<[...TReturns, PausableReturns['pauser()address'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Pausable smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PausableComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PausableComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PausableComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PausableComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PausableComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PausableComposerResults<TReturns>>
}
export type PausableComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

