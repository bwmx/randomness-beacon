#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "totalFulfilled" "beaconApp" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:19
    // totalFulfilled = GlobalState<arc4.UintN64>({ key: 'totalFulfilled', initialValue: new arc4.UintN64(0) })
    bytec_0 // "totalFulfilled"
    pushbytes 0x0000000000000000
    app_global_put

main_after_if_else@2:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:15
    // export class ExampleCaller extends Contract implements RandomnessBeaconCaller {
    txn NumAppArgs
    bz main_after_if_else@11
    pushbytess 0xf1c6f0dc 0xcd454eba 0x42cbfe4c // method "createApplication(application)void", method "test1(pay)(uint64,uint64)", method "fulfillRandomness(uint64,address,byte[64])void"
    txna ApplicationArgs 0
    match main_createApplication_route@5 main_test1_route@6 main_fulfillRandomness_route@7

main_after_if_else@11:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:15
    // export class ExampleCaller extends Contract implements RandomnessBeaconCaller {
    intc_1 // 0
    return

main_fulfillRandomness_route@7:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:41-45
    // public fulfillRandomness(
    //   requestId: arc4.UintN64,
    //   requesterAddress: arc4.Address,
    //   output: arc4.StaticBytes<64>,
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:15
    // export class ExampleCaller extends Contract implements RandomnessBeaconCaller {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:41-45
    // public fulfillRandomness(
    //   requestId: arc4.UintN64,
    //   requesterAddress: arc4.Address,
    //   output: arc4.StaticBytes<64>,
    // ): void {
    callsub fulfillRandomness
    intc_0 // 1
    return

main_test1_route@6:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:30
    // public test1(costsPayment: gtxn.PaymentTxn): arc4.Tuple<[arc4.UintN64, arc4.UintN64]> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:15
    // export class ExampleCaller extends Contract implements RandomnessBeaconCaller {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:30
    // public test1(costsPayment: gtxn.PaymentTxn): arc4.Tuple<[arc4.UintN64, arc4.UintN64]> {
    callsub test1
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_createApplication_route@5:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:25
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:15
    // export class ExampleCaller extends Contract implements RandomnessBeaconCaller {
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:25
    // @abimethod({ onCreate: 'require' })
    callsub createApplication
    intc_0 // 1
    return


// smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.createApplication(beaconApp: uint64) -> void:
createApplication:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:25-26
    // @abimethod({ onCreate: 'require' })
    // createApplication(beaconApp: Application): void {
    proto 1 0
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:17
    // beaconApp = GlobalState<Application>({ key: 'beaconApp' })
    bytec_1 // "beaconApp"
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:27
    // this.beaconApp.value = beaconApp
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.test1(costsPayment: uint64) -> bytes:
test1:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:30
    // public test1(costsPayment: gtxn.PaymentTxn): arc4.Tuple<[arc4.UintN64, arc4.UintN64]> {
    proto 1 1
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:17
    // beaconApp = GlobalState<Application>({ key: 'beaconApp' })
    intc_1 // 0
    bytec_1 // "beaconApp"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:31
    // const feePayment = itxn.payment({ receiver: this.beaconApp.value.address, amount: costsPayment.amount })
    app_params_get AppAddress
    assert // application exists
    frame_dig -1
    gtxns Amount
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:33
    // const targetRound = new arc4.UintN64(Global.round + 1)
    global Round
    intc_0 // 1
    +
    itob
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:34-37
    // const r = arc4.abiCall(RandomnessBeacon.prototype.createRequest, {
    //   appId: this.beaconApp.value,
    //   args: [new arc4.Address(Txn.sender), targetRound, feePayment],
    // })
    itxn_begin
    swap
    itxn_field Amount
    swap
    itxn_field Receiver
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:31
    // const feePayment = itxn.payment({ receiver: this.beaconApp.value.address, amount: costsPayment.amount })
    intc_0 // 1
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:34-37
    // const r = arc4.abiCall(RandomnessBeacon.prototype.createRequest, {
    //   appId: this.beaconApp.value,
    //   args: [new arc4.Address(Txn.sender), targetRound, feePayment],
    // })
    itxn_next
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:17
    // beaconApp = GlobalState<Application>({ key: 'beaconApp' })
    intc_1 // 0
    bytec_1 // "beaconApp"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:36
    // args: [new arc4.Address(Txn.sender), targetRound, feePayment],
    txn Sender
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:34-37
    // const r = arc4.abiCall(RandomnessBeacon.prototype.createRequest, {
    //   appId: this.beaconApp.value,
    //   args: [new arc4.Address(Txn.sender), targetRound, feePayment],
    // })
    pushbytes 0xd898eeb7 // method "createRequest(address,uint64,pay)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:39
    // return new arc4.Tuple(r.returnValue, targetRound)
    swap
    concat
    retsub


// smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.fulfillRandomness(requestId: bytes, requesterAddress: bytes, output: bytes) -> void:
fulfillRandomness:
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:41-45
    // public fulfillRandomness(
    //   requestId: arc4.UintN64,
    //   requesterAddress: arc4.Address,
    //   output: arc4.StaticBytes<64>,
    // ): void {
    proto 3 0
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:21
    // output = GlobalState<arc4.StaticBytes<64>>({ key: 'output' })
    pushbytes "output"
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:46
    // this.output.value = output
    frame_dig -1
    app_global_put
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:19
    // totalFulfilled = GlobalState<arc4.UintN64>({ key: 'totalFulfilled', initialValue: new arc4.UintN64(0) })
    intc_1 // 0
    bytec_0 // "totalFulfilled"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:47
    // this.totalFulfilled.value = new arc4.UintN64(this.totalFulfilled.value.native + 1)
    btoi
    intc_0 // 1
    +
    itob
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:19
    // totalFulfilled = GlobalState<arc4.UintN64>({ key: 'totalFulfilled', initialValue: new arc4.UintN64(0) })
    bytec_0 // "totalFulfilled"
    // smart_contracts/randomness_beacon/contracts/example-caller.algo.ts:47
    // this.totalFulfilled.value = new arc4.UintN64(this.totalFulfilled.value.native + 1)
    swap
    app_global_put
    retsub
