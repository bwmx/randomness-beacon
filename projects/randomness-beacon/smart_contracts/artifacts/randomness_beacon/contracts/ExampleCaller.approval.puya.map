{
  "version": 3,
  "sources": [
    "/Users/blairmcilroy/Projects/algorand/red-labs/randomness-beacon/projects/randomness-beacon/smart_contracts/randomness_beacon/contracts/example-caller.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBoD;AAAgC;;;;;;;;;;AAAlF;AAJF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA0BE;;AAAA;AAAA;AAAA;;AAAA;AA1BF;;;AAAA;;;AAAA;;;AA0BE;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAfF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAVH;;;AAAA;AAAA;;AAUG;;;AAAA;;AAAD;;;AAR4C;AAU1C;;AAAA;;AAGF;;;AAb4C;AAAA;AAAA;AAAA;AAcuB;;AAAA;AAA8B;;AAAA;;AAEnD;;AAAQ;AAAf;AAAjB;AACV;;;;;;;AAHS;;;AAAA;;;AAGT;AAjBgC;AAAA;AAAA;AAAA;AAmBZ;;AAFpB;;;;;;;;;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAKH;AAAA;AAAP;AAEF;;;AApBkD;;;;;;;;AAyBhD;;AAAA;AA3BgD;AAAA;AAAA;AAAA;AA4BuB;AAAS;AAAnC;AAAjB;AA5BoB;AA4BhD;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"totalFulfilled\" \"beaconApp\" 0x151f7c75"
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "39": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "42": {
      "op": "bytec_0 // \"totalFulfilled\"",
      "defined_out": [
        "\"totalFulfilled\""
      ],
      "stack_out": [
        "\"totalFulfilled\""
      ]
    },
    "43": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "\"totalFulfilled\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"totalFulfilled\"",
        "0x0000000000000000"
      ]
    },
    "53": {
      "op": "app_global_put",
      "stack_out": []
    },
    "54": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "56": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "59": {
      "op": "pushbytess 0xf1c6f0dc 0xcd454eba 0x42cbfe4c // method \"createApplication(application)void\", method \"test1(pay)(uint64,uint64)\", method \"fulfillRandomness(uint64,address,byte[64])void\"",
      "defined_out": [
        "Method(createApplication(application)void)",
        "Method(fulfillRandomness(uint64,address,byte[64])void)",
        "Method(test1(pay)(uint64,uint64))"
      ],
      "stack_out": [
        "Method(createApplication(application)void)",
        "Method(test1(pay)(uint64,uint64))",
        "Method(fulfillRandomness(uint64,address,byte[64])void)"
      ]
    },
    "76": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(application)void)",
        "Method(fulfillRandomness(uint64,address,byte[64])void)",
        "Method(test1(pay)(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(application)void)",
        "Method(test1(pay)(uint64,uint64))",
        "Method(fulfillRandomness(uint64,address,byte[64])void)",
        "tmp%2#0"
      ]
    },
    "79": {
      "op": "match main_createApplication_route@5 main_test1_route@6 main_fulfillRandomness_route@7",
      "stack_out": []
    },
    "87": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "return",
      "stack_out": []
    },
    "89": {
      "block": "main_fulfillRandomness_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "91": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "92": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "93": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "99": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "102": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[64]%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "105": {
      "callsub": "smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.fulfillRandomness",
      "op": "callsub fulfillRandomness",
      "stack_out": []
    },
    "108": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "return",
      "stack_out": []
    },
    "110": {
      "block": "main_test1_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "112": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "116": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "117": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "1"
      ]
    },
    "120": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "121": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "122": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "124": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "125": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "126": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "127": {
      "callsub": "smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.test1",
      "op": "callsub test1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "130": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%14#0"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "133": {
      "op": "log",
      "stack_out": []
    },
    "134": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_createApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "143": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "144": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "147": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "148": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "return",
      "stack_out": []
    },
    "155": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.createApplication",
      "params": {
        "beaconApp#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "158": {
      "op": "bytec_1 // \"beaconApp\"",
      "defined_out": [
        "\"beaconApp\""
      ],
      "stack_out": [
        "\"beaconApp\""
      ]
    },
    "159": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"beaconApp\"",
        "beaconApp#0 (copy)"
      ],
      "stack_out": [
        "\"beaconApp\"",
        "beaconApp#0 (copy)"
      ]
    },
    "161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "162": {
      "retsub": true,
      "op": "retsub"
    },
    "163": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.test1",
      "params": {
        "costsPayment#0": "uint64"
      },
      "block": "test1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "166": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "167": {
      "op": "bytec_1 // \"beaconApp\"",
      "defined_out": [
        "\"beaconApp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"beaconApp\""
      ]
    },
    "168": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "169": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "170": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "172": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "173": {
      "op": "frame_dig -1",
      "defined_out": [
        "costsPayment#0 (copy)",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "costsPayment#0 (copy)"
      ]
    },
    "175": {
      "op": "gtxns Amount",
      "defined_out": [
        "feePayment%%param_Amount_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "feePayment%%param_Amount_idx_0#0"
      ]
    },
    "177": {
      "op": "global Round",
      "defined_out": [
        "feePayment%%param_Amount_idx_0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "feePayment%%param_Amount_idx_0#0",
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "feePayment%%param_Amount_idx_0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "feePayment%%param_Amount_idx_0#0",
        "tmp%0#0",
        "1"
      ]
    },
    "180": {
      "op": "+",
      "defined_out": [
        "feePayment%%param_Amount_idx_0#0",
        "to_encode%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "feePayment%%param_Amount_idx_0#0",
        "to_encode%0#0"
      ]
    },
    "181": {
      "op": "itob",
      "defined_out": [
        "feePayment%%param_Amount_idx_0#0",
        "targetRound#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "feePayment%%param_Amount_idx_0#0",
        "targetRound#0"
      ]
    },
    "182": {
      "op": "itxn_begin"
    },
    "183": {
      "op": "swap",
      "stack_out": [
        "value%0#0",
        "targetRound#0",
        "feePayment%%param_Amount_idx_0#0"
      ]
    },
    "184": {
      "op": "itxn_field Amount",
      "stack_out": [
        "value%0#0",
        "targetRound#0"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "targetRound#0",
        "value%0#0"
      ]
    },
    "187": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "targetRound#0"
      ]
    },
    "189": {
      "op": "intc_0 // 1",
      "stack_out": [
        "targetRound#0",
        "1"
      ]
    },
    "190": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "targetRound#0"
      ]
    },
    "192": {
      "op": "intc_1 // 0",
      "stack_out": [
        "targetRound#0",
        "0"
      ]
    },
    "193": {
      "op": "itxn_field Fee",
      "stack_out": [
        "targetRound#0"
      ]
    },
    "195": {
      "op": "itxn_next"
    },
    "196": {
      "op": "intc_1 // 0",
      "stack_out": [
        "targetRound#0",
        "0"
      ]
    },
    "197": {
      "op": "bytec_1 // \"beaconApp\"",
      "stack_out": [
        "targetRound#0",
        "0",
        "\"beaconApp\""
      ]
    },
    "198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "targetRound#0"
      ],
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "199": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0"
      ]
    },
    "200": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "targetRound#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "202": {
      "op": "pushbytes 0xd898eeb7 // method \"createRequest(address,uint64,pay)uint64\"",
      "defined_out": [
        "Method(createRequest(address,uint64,pay)uint64)",
        "maybe_value%1#0",
        "targetRound#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0",
        "tmp%1#0",
        "Method(createRequest(address,uint64,pay)uint64)"
      ]
    },
    "208": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "210": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0"
      ]
    },
    "212": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "targetRound#0",
        "targetRound#0 (copy)"
      ],
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0",
        "targetRound#0 (copy)"
      ]
    },
    "214": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "targetRound#0",
        "maybe_value%1#0"
      ]
    },
    "216": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "targetRound#0"
      ]
    },
    "218": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "targetRound#0"
      ],
      "stack_out": [
        "targetRound#0",
        "appl"
      ]
    },
    "220": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "targetRound#0"
      ]
    },
    "222": {
      "op": "intc_1 // 0",
      "stack_out": [
        "targetRound#0",
        "0"
      ]
    },
    "223": {
      "op": "itxn_field Fee",
      "stack_out": [
        "targetRound#0"
      ]
    },
    "225": {
      "op": "itxn_submit"
    },
    "226": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "targetRound#0"
      ],
      "stack_out": [
        "targetRound#0",
        "awst_tmp%0#0"
      ]
    },
    "229": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "targetRound#0"
      ],
      "stack_out": [
        "targetRound#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "230": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "r.returnValue#0",
        "targetRound#0"
      ],
      "stack_out": [
        "targetRound#0",
        "awst_tmp%0#0",
        "r.returnValue#0"
      ]
    },
    "233": {
      "op": "swap",
      "stack_out": [
        "targetRound#0",
        "r.returnValue#0",
        "awst_tmp%0#0"
      ]
    },
    "234": {
      "op": "extract 0 4",
      "defined_out": [
        "r.returnValue#0",
        "targetRound#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "targetRound#0",
        "r.returnValue#0",
        "tmp%3#0"
      ]
    },
    "237": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "r.returnValue#0",
        "targetRound#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "targetRound#0",
        "r.returnValue#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "238": {
      "op": "==",
      "defined_out": [
        "r.returnValue#0",
        "targetRound#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "targetRound#0",
        "r.returnValue#0",
        "tmp%4#0"
      ]
    },
    "239": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "targetRound#0",
        "r.returnValue#0"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "r.returnValue#0",
        "targetRound#0"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "242": {
      "retsub": true,
      "op": "retsub"
    },
    "243": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/example-caller.algo.ts::ExampleCaller.fulfillRandomness",
      "params": {
        "requestId#0": "bytes",
        "requesterAddress#0": "bytes",
        "output#0": "bytes"
      },
      "block": "fulfillRandomness",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "246": {
      "op": "pushbytes \"output\"",
      "defined_out": [
        "\"output\""
      ],
      "stack_out": [
        "\"output\""
      ]
    },
    "254": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"output\"",
        "output#0 (copy)"
      ],
      "stack_out": [
        "\"output\"",
        "output#0 (copy)"
      ]
    },
    "256": {
      "op": "app_global_put",
      "stack_out": []
    },
    "257": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "258": {
      "op": "bytec_0 // \"totalFulfilled\"",
      "defined_out": [
        "\"totalFulfilled\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFulfilled\""
      ]
    },
    "259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "260": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "262": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "263": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "264": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "265": {
      "op": "bytec_0 // \"totalFulfilled\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "\"totalFulfilled\""
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "\"totalFulfilled\"",
        "val_as_bytes%0#0"
      ]
    },
    "267": {
      "op": "app_global_put",
      "stack_out": []
    },
    "268": {
      "retsub": true,
      "op": "retsub"
    }
  }
}