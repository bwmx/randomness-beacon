{
  "version": 3,
  "sources": [
    "/Users/blairmcilroy/Projects/algorand/red-labs/randomness-beacon/projects/randomness-beacon/smart_contracts/randomness_beacon/contracts/managable.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAcS;AACiC;;AAFxC;AADF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA0CG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAXD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAlBF;;;AAkBE;;;AAAA;;AAlBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAES;AAAA;AAAA;AAAA;AASqC;;AAAnC;AAAP;;AAOF;;;AAEE;;;AAEO;;AAA6B;;AAA7B;AAAP;AApBK;AAsBL;;AAAA;;AASA;;;AA/BK;AAiCyC;;AAA9C;;AAjCK;AAAA;AAAA;AAAA;AA0CL",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"manager\""
    },
    "15": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "17": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "20": {
      "op": "bytec_0 // \"manager\"",
      "defined_out": [
        "\"manager\""
      ],
      "stack_out": [
        "\"manager\""
      ]
    },
    "21": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"manager\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager\"",
        "new_state_value%0#0"
      ]
    },
    "23": {
      "op": "app_global_put",
      "stack_out": []
    },
    "24": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "29": {
      "op": "pushbytess 0x8960168e 0xd48d426c 0x67434031 // method \"updateManager(address)void\", method \"deleteManager()void\", method \"manager()address\"",
      "defined_out": [
        "Method(deleteManager()void)",
        "Method(manager()address)",
        "Method(updateManager(address)void)"
      ],
      "stack_out": [
        "Method(updateManager(address)void)",
        "Method(deleteManager()void)",
        "Method(manager()address)"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deleteManager()void)",
        "Method(manager()address)",
        "Method(updateManager(address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(updateManager(address)void)",
        "Method(deleteManager()void)",
        "Method(manager()address)",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "match main_updateManager_route@5 main_deleteManager_route@6 main_manager_route@7",
      "stack_out": []
    },
    "57": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "return",
      "stack_out": []
    },
    "59": {
      "block": "main_manager_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "62": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "65": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "66": {
      "callsub": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.manager",
      "op": "callsub manager",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "69": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "77": {
      "op": "log",
      "stack_out": []
    },
    "78": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "block": "main_deleteManager_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "87": {
      "callsub": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.deleteManager",
      "op": "callsub deleteManager"
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_updateManager_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "98": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "99": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "102": {
      "callsub": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.updateManager",
      "op": "callsub updateManager",
      "stack_out": []
    },
    "105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "return",
      "stack_out": []
    },
    "107": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "109": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "112": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "115": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.onlyManager",
      "params": {},
      "block": "onlyManager",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "119": {
      "op": "bytec_0 // \"manager\"",
      "defined_out": [
        "\"manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager\""
      ]
    },
    "120": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "121": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "122": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "125": {
      "error": "only manager can perform this action",
      "op": "assert // only manager can perform this action",
      "stack_out": []
    },
    "126": {
      "retsub": true,
      "op": "retsub"
    },
    "127": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.updateManager",
      "params": {
        "newManager#0": "bytes"
      },
      "block": "updateManager",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "130": {
      "callsub": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.onlyManager",
      "op": "callsub onlyManager"
    },
    "133": {
      "op": "frame_dig -1",
      "defined_out": [
        "newManager#0 (copy)"
      ],
      "stack_out": [
        "newManager#0 (copy)"
      ]
    },
    "135": {
      "op": "global ZeroAddress",
      "defined_out": [
        "newManager#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "newManager#0 (copy)",
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "138": {
      "error": "manager cannot be zero address",
      "op": "assert // manager cannot be zero address",
      "stack_out": []
    },
    "139": {
      "op": "bytec_0 // \"manager\"",
      "defined_out": [
        "\"manager\""
      ],
      "stack_out": [
        "\"manager\""
      ]
    },
    "140": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"manager\"",
        "newManager#0 (copy)"
      ]
    },
    "142": {
      "op": "app_global_put",
      "stack_out": []
    },
    "143": {
      "retsub": true,
      "op": "retsub"
    },
    "144": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.deleteManager",
      "params": {},
      "block": "deleteManager",
      "stack_in": [],
      "callsub": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.onlyManager",
      "op": "callsub onlyManager"
    },
    "147": {
      "op": "bytec_0 // \"manager\"",
      "defined_out": [
        "\"manager\""
      ],
      "stack_out": [
        "\"manager\""
      ]
    },
    "148": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"manager\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager\"",
        "new_state_value%0#0"
      ]
    },
    "150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "151": {
      "retsub": true,
      "op": "retsub"
    },
    "152": {
      "subroutine": "smart_contracts/randomness_beacon/contracts/managable.algo.ts::Managable.manager",
      "params": {},
      "block": "manager",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "153": {
      "op": "bytec_0 // \"manager\"",
      "defined_out": [
        "\"manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager\""
      ]
    },
    "154": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "155": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "156": {
      "retsub": true,
      "op": "retsub"
    }
  }
}