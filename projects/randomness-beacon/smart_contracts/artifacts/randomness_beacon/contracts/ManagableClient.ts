/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Managable","structs":{},"methods":[{"name":"updateManager","args":[{"type":"address","name":"newManager"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update the manager of this contract","events":[],"recommendations":{}},{"name":"deleteManager","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Delete the manager of this contract","events":[],"recommendations":{}},{"name":"manager","args":[],"returns":{"type":"address","desc":"The current manager of this contract"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Convenience function to get the current manager of this contract","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Manageable contract, designed to be inherited by other contracts (address will always be set to app creator initially)","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"_manager":{"keyType":"AVMString","valueType":"address","key":"bWFuYWdlcg=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[62,83,95],"errorMessage":"OnCompletion is not NoOp"},{"pc":[115],"errorMessage":"can only call when creating"},{"pc":[65,86,98],"errorMessage":"can only call when not creating"},{"pc":[121,155],"errorMessage":"check GlobalState exists"},{"pc":[138],"errorMessage":"manager cannot be zero address"},{"pc":[125],"errorMessage":"only manager can perform this action"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrICJtYW5hZ2VyIgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czoxNQogICAgLy8ga2V5OiAnbWFuYWdlcicsCiAgICBieXRlY18wIC8vICJtYW5hZ2VyIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czoxNgogICAgLy8gaW5pdGlhbFZhbHVlOiBuZXcgYXJjNC5BZGRyZXNzKEdsb2JhbC5jcmVhdG9yQWRkcmVzcyksCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvbWFuYWdhYmxlLmFsZ28udHM6MTQtMTcKICAgIC8vIHByaXZhdGUgX21hbmFnZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsKICAgIC8vICAga2V5OiAnbWFuYWdlcicsCiAgICAvLyAgIGluaXRpYWxWYWx1ZTogbmV3IGFyYzQuQWRkcmVzcyhHbG9iYWwuY3JlYXRvckFkZHJlc3MpLAogICAgLy8gfSkKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvbWFuYWdhYmxlLmFsZ28udHM6MTMKICAgIC8vIGV4cG9ydCBjbGFzcyBNYW5hZ2FibGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTAKICAgIHB1c2hieXRlc3MgMHg4OTYwMTY4ZSAweGQ0OGQ0MjZjIDB4Njc0MzQwMzEgLy8gbWV0aG9kICJ1cGRhdGVNYW5hZ2VyKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiZGVsZXRlTWFuYWdlcigpdm9pZCIsIG1ldGhvZCAibWFuYWdlcigpYWRkcmVzcyIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fdXBkYXRlTWFuYWdlcl9yb3V0ZUA1IG1haW5fZGVsZXRlTWFuYWdlcl9yb3V0ZUA2IG1haW5fbWFuYWdlcl9yb3V0ZUA3CgptYWluX2FmdGVyX2lmX2Vsc2VAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjEzCiAgICAvLyBleHBvcnQgY2xhc3MgTWFuYWdhYmxlIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18xIC8vIDAKICAgIHJldHVybgoKbWFpbl9tYW5hZ2VyX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIG1hbmFnZXIKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVNYW5hZ2VyX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjQ0CiAgICAvLyBwdWJsaWMgZGVsZXRlTWFuYWdlcigpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkZWxldGVNYW5hZ2VyCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZU1hbmFnZXJfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvbWFuYWdhYmxlLmFsZ28udHM6MzEKICAgIC8vIHB1YmxpYyB1cGRhdGVNYW5hZ2VyKG5ld01hbmFnZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjEzCiAgICAvLyBleHBvcnQgY2xhc3MgTWFuYWdhYmxlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czozMQogICAgLy8gcHVibGljIHVwZGF0ZU1hbmFnZXIobmV3TWFuYWdlcjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBjYWxsc3ViIHVwZGF0ZU1hbmFnZXIKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czoxMwogICAgLy8gZXhwb3J0IGNsYXNzIE1hbmFnYWJsZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTQKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czo6TWFuYWdhYmxlLm9ubHlNYW5hZ2VyKCkgLT4gdm9pZDoKb25seU1hbmFnZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjE1CiAgICAvLyBrZXk6ICdtYW5hZ2VyJywKICAgIGludGNfMSAvLyAwCiAgICBieXRlY18wIC8vICJtYW5hZ2VyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvbWFuYWdhYmxlLmFsZ28udHM6MjQKICAgIC8vIGFzc2VydCh0aGlzLl9tYW5hZ2VyLnZhbHVlLm5hdGl2ZSA9PT0gVHhuLnNlbmRlciwgRVJSX09OTFlfTUFOQUdFUikKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gb25seSBtYW5hZ2VyIGNhbiBwZXJmb3JtIHRoaXMgYWN0aW9uCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjpNYW5hZ2FibGUudXBkYXRlTWFuYWdlcihuZXdNYW5hZ2VyOiBieXRlcykgLT4gdm9pZDoKdXBkYXRlTWFuYWdlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvbWFuYWdhYmxlLmFsZ28udHM6MzEKICAgIC8vIHB1YmxpYyB1cGRhdGVNYW5hZ2VyKG5ld01hbmFnZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjMzCiAgICAvLyB0aGlzLm9ubHlNYW5hZ2VyKCkKICAgIGNhbGxzdWIgb25seU1hbmFnZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yYW5kb21uZXNzX2JlYWNvbi9jb250cmFjdHMvbWFuYWdhYmxlLmFsZ28udHM6MzUKICAgIC8vIGFzc2VydChuZXdNYW5hZ2VyLm5hdGl2ZSAhPT0gR2xvYmFsLnplcm9BZGRyZXNzLCBFUlJfWkVST19BRERSRVNTKQogICAgZnJhbWVfZGlnIC0xCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gbWFuYWdlciBjYW5ub3QgYmUgemVybyBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjE1CiAgICAvLyBrZXk6ICdtYW5hZ2VyJywKICAgIGJ5dGVjXzAgLy8gIm1hbmFnZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjM3CiAgICAvLyB0aGlzLl9tYW5hZ2VyLnZhbHVlID0gbmV3TWFuYWdlcgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czo6TWFuYWdhYmxlLmRlbGV0ZU1hbmFnZXIoKSAtPiB2b2lkOgpkZWxldGVNYW5hZ2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czo0NgogICAgLy8gdGhpcy5vbmx5TWFuYWdlcigpCiAgICBjYWxsc3ViIG9ubHlNYW5hZ2VyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjE1CiAgICAvLyBrZXk6ICdtYW5hZ2VyJywKICAgIGJ5dGVjXzAgLy8gIm1hbmFnZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjQ4CiAgICAvLyB0aGlzLl9tYW5hZ2VyLnZhbHVlID0gbmV3IGFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb0FkZHJlc3MpCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjpNYW5hZ2FibGUubWFuYWdlcigpIC0+IGJ5dGVzOgptYW5hZ2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JhbmRvbW5lc3NfYmVhY29uL2NvbnRyYWN0cy9tYW5hZ2FibGUuYWxnby50czoxNQogICAgLy8ga2V5OiAnbWFuYWdlcicsCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAibWFuYWdlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmFuZG9tbmVzc19iZWFjb24vY29udHJhY3RzL21hbmFnYWJsZS5hbGdvLnRzOjU3CiAgICAvLyByZXR1cm4gdGhpcy5fbWFuYWdlci52YWx1ZQogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAQdtYW5hZ2VyMRhAAAQoMglnMRtBAE6CAwSJYBaOBNSNQmwEZ0NAMTYaAI4DACMAFwACI0MxGRREMRhEiABTgAQVH3x1TFCwIkMxGRREMRhEiAA2IkMxGRREMRhENhoBiAAWIkMxGUD/yTEYFEQiQyMoZUQxABJEiYoBAIj/8Yv/MgMTRCiL/2eJiP/jKDIDZ4kjKGVEiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Managable contract
 */
export type ManagableArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'updateManager(address)void': {
      newManager: string
    }
    'deleteManager()void': Record<string, never>
    'manager()address': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'updateManager(address)void': [newManager: string]
    'deleteManager()void': []
    'manager()address': []
  }
}

/**
 * The return type for each method
 */
export type ManagableReturns = {
  'updateManager(address)void': void
  'deleteManager()void': void
  'manager()address': string
}

/**
 * Defines the types of available calls and state of the Managable smart contract.
 */
export type ManagableTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'updateManager(address)void' | 'updateManager', {
      argsObj: ManagableArgs['obj']['updateManager(address)void']
      argsTuple: ManagableArgs['tuple']['updateManager(address)void']
      returns: ManagableReturns['updateManager(address)void']
    }>
    & Record<'deleteManager()void' | 'deleteManager', {
      argsObj: ManagableArgs['obj']['deleteManager()void']
      argsTuple: ManagableArgs['tuple']['deleteManager()void']
      returns: ManagableReturns['deleteManager()void']
    }>
    & Record<'manager()address' | 'manager', {
      argsObj: ManagableArgs['obj']['manager()address']
      argsTuple: ManagableArgs['tuple']['manager()address']
      /**
       * The current manager of this contract
       */
      returns: ManagableReturns['manager()address']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        _manager: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ManagableSignatures = keyof ManagableTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ManagableNonVoidMethodSignatures = keyof ManagableTypes['methods'] extends infer T ? T extends keyof ManagableTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Managable smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ManagableSignatures> = ManagableTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Managable smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ManagableSignatures> = ManagableTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ManagableTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ManagableCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ManagableDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ManagableCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Managable smart contract
 */
export abstract class ManagableParamsFactory {
  /**
   * Constructs a no op call for the updateManager(address)void ABI method
   *
   * Update the manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateManager(params: CallParams<ManagableArgs['obj']['updateManager(address)void'] | ManagableArgs['tuple']['updateManager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateManager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newManager],
    }
  }
  /**
   * Constructs a no op call for the deleteManager()void ABI method
   *
   * Delete the manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteManager(params: CallParams<ManagableArgs['obj']['deleteManager()void'] | ManagableArgs['tuple']['deleteManager()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteManager()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the manager()address ABI method
   *
   * Convenience function to get the current manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static manager(params: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'manager()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Managable smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ManagableFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ManagableFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ManagableClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ManagableClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Managable smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ManagableDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ManagableClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Managable smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Managable smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Managable smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ManagableClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Managable smart contract
 */
export class ManagableClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ManagableClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Managable app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ManagableClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ManagableNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ManagableClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ManagableClient> {
    return new ManagableClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ManagableClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ManagableClient> {
    return new ManagableClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Managable smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Managable smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateManager: (params: CallParams<ManagableArgs['obj']['updateManager(address)void'] | ManagableArgs['tuple']['updateManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ManagableParamsFactory.updateManager(params))
    },

    /**
     * Makes a call to the Managable smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteManager: (params: CallParams<ManagableArgs['obj']['deleteManager()void'] | ManagableArgs['tuple']['deleteManager()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ManagableParamsFactory.deleteManager(params))
    },

    /**
     * Makes a call to the Managable smart contract using the `manager()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current manager of this contract
     */
    manager: (params: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ManagableParamsFactory.manager(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Managable smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Managable smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateManager: (params: CallParams<ManagableArgs['obj']['updateManager(address)void'] | ManagableArgs['tuple']['updateManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ManagableParamsFactory.updateManager(params))
    },

    /**
     * Makes a call to the Managable smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteManager: (params: CallParams<ManagableArgs['obj']['deleteManager()void'] | ManagableArgs['tuple']['deleteManager()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ManagableParamsFactory.deleteManager(params))
    },

    /**
     * Makes a call to the Managable smart contract using the `manager()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current manager of this contract
     */
    manager: (params: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ManagableParamsFactory.manager(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Managable smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Managable smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateManager: async (params: CallParams<ManagableArgs['obj']['updateManager(address)void'] | ManagableArgs['tuple']['updateManager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ManagableParamsFactory.updateManager(params))
      return {...result, return: result.return as unknown as (undefined | ManagableReturns['updateManager(address)void'])}
    },

    /**
     * Makes a call to the Managable smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteManager: async (params: CallParams<ManagableArgs['obj']['deleteManager()void'] | ManagableArgs['tuple']['deleteManager()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ManagableParamsFactory.deleteManager(params))
      return {...result, return: result.return as unknown as (undefined | ManagableReturns['deleteManager()void'])}
    },

    /**
     * Makes a call to the Managable smart contract using the `manager()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current manager of this contract
     */
    manager: async (params: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ManagableParamsFactory.manager(params))
      return {...result, return: result.return as unknown as (undefined | ManagableReturns['manager()address'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ManagableClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Managable smart contract using the `manager()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Convenience function to get the current manager of this contract
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current manager of this contract
   */
  async manager(params: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']> = {args: []}) {
    const result = await this.appClient.send.call(ManagableParamsFactory.manager(params))
    return result.return as unknown as ManagableReturns['manager()address']
  }

  /**
   * Methods to access state for the current Managable app
   */
  state = {
    /**
     * Methods to access global state for the current Managable app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          _manager: result._manager,
        }
      },
      /**
       * Get the current value of the _manager key in global state
       */
      _manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("_manager")) as string | undefined },
    },
  }

  public newGroup(): ManagableComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a updateManager(address)void method call against the Managable contract
       */
      updateManager(params: CallParams<ManagableArgs['obj']['updateManager(address)void'] | ManagableArgs['tuple']['updateManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteManager()void method call against the Managable contract
       */
      deleteManager(params: CallParams<ManagableArgs['obj']['deleteManager()void'] | ManagableArgs['tuple']['deleteManager()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a manager()address method call against the Managable contract
       */
      manager(params: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.manager(params)))
        resultMappers.push((v) => client.decodeReturnValue('manager()address', v))
        return this
      },
      /**
       * Add a clear state call to the Managable contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ManagableComposer
  }
}
export type ManagableComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the updateManager(address)void ABI method.
   *
   * Update the manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManager(params?: CallParams<ManagableArgs['obj']['updateManager(address)void'] | ManagableArgs['tuple']['updateManager(address)void']>): ManagableComposer<[...TReturns, ManagableReturns['updateManager(address)void'] | undefined]>

  /**
   * Calls the deleteManager()void ABI method.
   *
   * Delete the manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteManager(params?: CallParams<ManagableArgs['obj']['deleteManager()void'] | ManagableArgs['tuple']['deleteManager()void']>): ManagableComposer<[...TReturns, ManagableReturns['deleteManager()void'] | undefined]>

  /**
   * Calls the manager()address ABI method.
   *
   * Convenience function to get the current manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  manager(params?: CallParams<ManagableArgs['obj']['manager()address'] | ManagableArgs['tuple']['manager()address']>): ManagableComposer<[...TReturns, ManagableReturns['manager()address'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Managable smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ManagableComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ManagableComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ManagableComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ManagableComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ManagableComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ManagableComposerResults<TReturns>>
}
export type ManagableComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

