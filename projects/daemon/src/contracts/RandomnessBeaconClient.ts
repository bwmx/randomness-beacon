/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from '@algorandfoundation/algokit-utils/types/app-factory'
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from '@algorandfoundation/algokit-utils/types/composer'
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {
  name: 'RandomnessBeacon',
  structs: {
    RandomnessRequest: [
      { name: 'createdAt', type: 'uint64' },
      { name: 'requesterAppId', type: 'uint64' },
      { name: 'requesterAddress', type: 'address' },
      { name: 'round', type: 'uint64' },
      { name: 'feePaid', type: 'uint64' },
      { name: 'boxCost', type: 'uint64' },
    ],
  },
  methods: [
    {
      name: 'createApplication',
      args: [{ type: 'byte[32]', name: 'publicKey', desc: 'the public key used to verify VRF proofs we will accept' }],
      returns: { type: 'void' },
      actions: { create: ['NoOp'], call: [] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: 'updateApplication',
      args: [],
      returns: { type: 'void' },
      actions: { create: [], call: ['UpdateApplication'] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: 'deleteApplication',
      args: [],
      returns: { type: 'void' },
      actions: { create: [], call: ['DeleteApplication'] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: 'createRequest',
      args: [
        { type: 'address', name: 'requesterAddress', desc: 'who the request is on behalf of?' },
        { type: 'uint64', name: 'round', desc: 'the round to request the randomness for' },
        { type: 'pay', name: 'costsPayment', desc: 'payment covering txnFees + boxCost' },
      ],
      returns: { type: 'uint64', desc: 'a unique request ID to be used to identify the request' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [
        {
          name: 'RequestCreated',
          args: [
            { type: 'uint64', name: 'requestId' },
            { type: 'uint64', name: 'requesterAppId' },
            { type: 'address', name: 'requesterAddress' },
            { type: 'uint64', name: 'round' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'cancelRequest',
      args: [{ type: 'uint64', name: 'requestId' }],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [
        {
          name: 'RequestCancelled',
          args: [
            { type: 'uint64', name: 'requestId' },
            { type: 'uint64', name: 'requesterAppId' },
            { type: 'address', name: 'requesterAddress' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'completeRequest',
      args: [
        { type: 'uint64', name: 'requestId', desc: 'the ID of the VRF request' },
        {
          type: 'byte[80]',
          name: 'proof',
          desc: 'the VRF proof output using the `targetRound` block seed of the targeted RandomnessBeaconRequest',
        },
      ],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [
        {
          name: 'RequestFulfilled',
          args: [
            { type: 'uint64', name: 'requestId' },
            { type: 'uint64', name: 'requesterAppId' },
            { type: 'address', name: 'requesterAddress' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'getCosts',
      args: [],
      returns: {
        type: '(uint64,uint64)',
        desc: 'arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)',
      },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: '\nConvenience function to get associated costs with using the beacon service',
      events: [],
      recommendations: {},
    },
    {
      name: 'updateManager',
      args: [{ type: 'address', name: 'newManager' }],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      desc: 'Update the manager of this contract',
      events: [],
      recommendations: {},
    },
    {
      name: 'deleteManager',
      args: [],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      desc: 'Delete the manager of this contract',
      events: [],
      recommendations: {},
    },
    {
      name: 'manager',
      args: [],
      returns: { type: 'address', desc: 'The current manager of this contract' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Convenience function to get the current manager of this contract',
      events: [],
      recommendations: {},
    },
    {
      name: 'pause',
      args: [],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: 'unpause',
      args: [],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: 'updatePauser',
      args: [{ type: 'address', name: '_newPauser' }],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: 'pauser',
      args: [],
      returns: { type: 'address', desc: 'The current pauser' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Convenience function to get the pauser',
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  networks: {},
  state: {
    schema: { global: { ints: 0, bytes: 6 }, local: { ints: 0, bytes: 0 } },
    keys: {
      global: {
        publicKey: { keyType: 'AVMString', valueType: 'byte[32]', key: 'cHVibGljS2V5' },
        currentRequestId: { keyType: 'AVMString', valueType: 'uint64', key: 'Y3VycmVudFJlcXVlc3RJZA==' },
        totalPendingRequests: { keyType: 'AVMString', valueType: 'uint64', key: 'dG90YWxQZW5kaW5nUmVxdWVzdHM=' },
        _manager: { keyType: 'AVMString', valueType: 'address', key: 'bWFuYWdlcg==' },
        _pauser: { keyType: 'AVMString', valueType: 'address', key: 'cGF1c2Vy' },
        paused: { keyType: 'AVMString', valueType: 'bool', key: 'cGF1c2Vk' },
      },
      local: {},
      box: {},
    },
    maps: {
      global: {},
      local: {},
      box: { requests: { keyType: 'uint64', valueType: 'RandomnessRequest', prefix: 'cmVxdWVzdHM=' } },
    },
  },
  bareActions: { create: [], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        { pc: [758, 919], errorMessage: 'Box must have value' },
        { pc: [620, 784, 879, 975, 984], errorMessage: 'Index access is out of bounds' },
        { pc: [454], errorMessage: 'OnCompletion is not DeleteApplication' },
        { pc: [270, 287, 302, 314, 326, 343, 355, 370, 387, 405, 420, 480], errorMessage: 'OnCompletion is not NoOp' },
        { pc: [468], errorMessage: 'OnCompletion is not UpdateApplication' },
        { pc: [484], errorMessage: 'can only call when creating' },
        {
          pc: [273, 290, 305, 317, 329, 346, 358, 373, 390, 408, 423, 457, 471],
          errorMessage: 'can only call when not creating',
        },
        { pc: [604], errorMessage: 'cannot exceed max pending requests' },
        { pc: [499, 534, 592, 600, 690, 711, 961, 1130, 1164, 1169, 1213], errorMessage: 'check GlobalState exists' },
        { pc: [651], errorMessage: 'costs payment must be valid' },
        { pc: [993], errorMessage: 'invalid size' },
        { pc: [1147], errorMessage: 'manager cannot be zero address' },
        { pc: [611], errorMessage: 'must be a future round' },
        { pc: [770], errorMessage: 'must be after the max pending time' },
        { pc: [615], errorMessage: 'must be called by an application' },
        { pc: [537], errorMessage: 'no pending requests' },
        { pc: [1134], errorMessage: 'only manager can perform this action' },
        { pc: [1173], errorMessage: 'only pauser can call this method' },
        { pc: [1204], errorMessage: 'pauser cannot be zero address' },
        { pc: [970], errorMessage: 'proof must be valid' },
        { pc: [439], errorMessage: 'transaction type is pay' },
      ],
      pcOffsetMethod: 'none',
    },
    clear: { sourceInfo: [], pcOffsetMethod: 'none' },
  },
  source: {
    approval:
      '',
    clear:
      'I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==',
  },
  byteCode: {
    approval:
      'CyAEAQAFCCYKFHRvdGFsUGVuZGluZ1JlcXVlc3RzB21hbmFnZXIGcGF1c2VyBnBhdXNlZAQVH3x1CHJlcXVlc3RzEGN1cnJlbnRSZXF1ZXN0SWQJcHVibGljS2V5DmJveCBtYnIgcmVmdW5kAwaBATEYQAAmKTIJZyoyCWcrgAEAZycGgAgAAAAAAAAAAWcogAgAAAAAAAAAAGcxG0EAaYIOBO/L08sERvdlMwQkh8MsBNiY7rcE8SxingQhtpxZBGwZYVoEiWAWjgTUjUJsBGdDQDEEAXj5SwQbUp3oBAyt0WMEsNlTszYaAI4OANQAxgC5AJgAiQB3AGYAVwBLADoALgAiABMAAiNDMRkURDEYRIgDpScETFCwIkMxGRREMRhENhoBiAOAIkMxGRREMRhEiANrIkMxGRREMRhEiANWIkMxGRREMRhEiAM8JwRMULAiQzEZFEQxGESIAyMiQzEZFEQxGEQ2GgGIAwMiQzEZFEQxGESIAuEnBExQsCJDMRkURDEYRDYaATYaAogB9yJDMRkURDEYRDYaAYgBSiJDMRkURDEYRDYaATYaAjEWIglJOBAiEkSIAI8nBExQsCJDMRkkEkQxGESIAEMiQzEZgQQSRDEYRIgAMSJDMRkURDEYFEQ2GgGIABgiQ4oBACMoZUQXIgkWKExnJwWL/1C8SImKAQAnB4v/Z4mIAliJiAJUIyhlRBcURLGIAmuAHmNsb3NlIG91dCByZW1haW5kZXIgdG8gbWFuYWdlcrIFsgkishAjsgGziYoDASMrZUQjUxREIyhlRBckDESL/hcyBg1EMg1JRIgB70lXCAiL/zgHMgoSQQBsi/84CIsBSSNbTCVbCA9BAFsiRIv/OAiLASVbCTIGFosAFk8CFk8CSwJQi/1Qi/5QTFCLAlAjJwZlRCcFSwFQTwK/SRciCBYnBkxnIyhlRBciCBYoTGdJTwJQi/1Qi/5QgATQa1bmTFCwjACJI0L/oooBACcFi/9QvkxJTwJEMgZLAYEwW4FkCA9ESYFAW0sBgThbCElPAlcQIElOAjEAE0EAPDIAgQMLiwFLAQmxMQCAHGNhbmNlbGxhdGlvbiBmZWVzIGZvciBjYWxsZXKyBU8CsgiyByKyECOyAbOMA4sDsScIsgWyCIsCSbIHIrIQI7IBs4sAVwgIi/9MUExQgATFHPZ9TFCwi/+I/meJigIAiADaJwWL/lC+TElPAkSBMFvRAIHOLDIMDUEAF7GBBrIQJLIZJwmyHicJsh8jsgGzQv/gIycHZUSLAYv/TwLQAESxiwBJVwgISwElW0sCVxAgSwQVgUASRIAEQsv+TLIai/6yGkmyGk8EshpMshiBBrIQI7IBs7ExAEsDgThbgBdmZWVzIHBheW1lbnQgZm9yIGNhbGxlcrIFsgiyByKyECOyAbOxTwKBQFsnCLIFsghJsgcishAjsgGzi/5PAlBMUIAEbMwcvkxQsIv+iP2UiTIAgQwLFoHEpgIWUIkjKWVEMQASRImKAQCI//GL/zIDE0Qpi/9niYj/4ykyA2eJIyllRIkjKmVEMQASRImI//QrgAGAZ4mI/+srgAEAZ4mKAQCI/9+L/zIDE0Qqi/9niSMqZUSJ',
    clear: 'C4EBQw==',
  },
  events: [
    {
      name: 'RequestCreated',
      args: [
        { type: 'uint64', name: 'requestId' },
        { type: 'uint64', name: 'requesterAppId' },
        { type: 'address', name: 'requesterAddress' },
        { type: 'uint64', name: 'round' },
      ],
    },
    {
      name: 'RequestCancelled',
      args: [
        { type: 'uint64', name: 'requestId' },
        { type: 'uint64', name: 'requesterAppId' },
        { type: 'address', name: 'requesterAddress' },
      ],
    },
    {
      name: 'RequestFulfilled',
      args: [
        { type: 'uint64', name: 'requestId' },
        { type: 'uint64', name: 'requesterAppId' },
        { type: 'address', name: 'requesterAddress' },
      ],
    },
  ],
  templateVariables: {},
} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never

// Type definitions for ARC-56 structs

export type RandomnessRequest = {
  createdAt: bigint
  requesterAppId: bigint
  requesterAddress: string
  round: bigint
  feePaid: bigint
  boxCost: bigint
}

/**
 * Converts the ABI tuple representation of a RandomnessRequest to the struct representation
 */
export function RandomnessRequestFromTuple(abiTuple: [bigint, bigint, string, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.RandomnessRequest, APP_SPEC.structs) as RandomnessRequest
}

/**
 * The argument types for the RandomnessBeacon contract
 */
export type RandomnessBeaconArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(byte[32])void': {
      /**
       * the public key used to verify VRF proofs we will accept
       */
      publicKey: Uint8Array
    }
    'updateApplication()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
    'createRequest(address,uint64,pay)uint64': {
      /**
       * who the request is on behalf of?
       */
      requesterAddress: string
      /**
       * the round to request the randomness for
       */
      round: bigint | number
      /**
       * payment covering txnFees + boxCost
       */
      costsPayment: AppMethodCallTransactionArgument
    }
    'cancelRequest(uint64)void': {
      requestId: bigint | number
    }
    'completeRequest(uint64,byte[80])void': {
      /**
       * the ID of the VRF request
       */
      requestId: bigint | number
      /**
       * the VRF proof output using the `targetRound` block seed of the targeted RandomnessBeaconRequest
       */
      proof: Uint8Array
    }
    'getCosts()(uint64,uint64)': Record<string, never>
    'updateManager(address)void': {
      newManager: string
    }
    'deleteManager()void': Record<string, never>
    'manager()address': Record<string, never>
    'pause()void': Record<string, never>
    'unpause()void': Record<string, never>
    'updatePauser(address)void': {
      _newPauser: string
    }
    'pauser()address': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(byte[32])void': [publicKey: Uint8Array]
    'updateApplication()void': []
    'deleteApplication()void': []
    'createRequest(address,uint64,pay)uint64': [
      requesterAddress: string,
      round: bigint | number,
      costsPayment: AppMethodCallTransactionArgument,
    ]
    'cancelRequest(uint64)void': [requestId: bigint | number]
    'completeRequest(uint64,byte[80])void': [requestId: bigint | number, proof: Uint8Array]
    'getCosts()(uint64,uint64)': []
    'updateManager(address)void': [newManager: string]
    'deleteManager()void': []
    'manager()address': []
    'pause()void': []
    'unpause()void': []
    'updatePauser(address)void': [_newPauser: string]
    'pauser()address': []
  }
}

/**
 * The return type for each method
 */
export type RandomnessBeaconReturns = {
  'createApplication(byte[32])void': void
  'updateApplication()void': void
  'deleteApplication()void': void
  'createRequest(address,uint64,pay)uint64': bigint
  'cancelRequest(uint64)void': void
  'completeRequest(uint64,byte[80])void': void
  'getCosts()(uint64,uint64)': [bigint, bigint]
  'updateManager(address)void': void
  'deleteManager()void': void
  'manager()address': string
  'pause()void': void
  'unpause()void': void
  'updatePauser(address)void': void
  'pauser()address': string
}

/**
 * Defines the types of available calls and state of the RandomnessBeacon smart contract.
 */
export type RandomnessBeaconTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'createApplication(byte[32])void' | 'createApplication',
    {
      argsObj: RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
      argsTuple: RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
      returns: RandomnessBeaconReturns['createApplication(byte[32])void']
    }
  > &
    Record<
      'updateApplication()void' | 'updateApplication',
      {
        argsObj: RandomnessBeaconArgs['obj']['updateApplication()void']
        argsTuple: RandomnessBeaconArgs['tuple']['updateApplication()void']
        returns: RandomnessBeaconReturns['updateApplication()void']
      }
    > &
    Record<
      'deleteApplication()void' | 'deleteApplication',
      {
        argsObj: RandomnessBeaconArgs['obj']['deleteApplication()void']
        argsTuple: RandomnessBeaconArgs['tuple']['deleteApplication()void']
        returns: RandomnessBeaconReturns['deleteApplication()void']
      }
    > &
    Record<
      'createRequest(address,uint64,pay)uint64' | 'createRequest',
      {
        argsObj: RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
        argsTuple: RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
        /**
         * a unique request ID to be used to identify the request
         */
        returns: RandomnessBeaconReturns['createRequest(address,uint64,pay)uint64']
      }
    > &
    Record<
      'cancelRequest(uint64)void' | 'cancelRequest',
      {
        argsObj: RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
        argsTuple: RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
        returns: RandomnessBeaconReturns['cancelRequest(uint64)void']
      }
    > &
    Record<
      'completeRequest(uint64,byte[80])void' | 'completeRequest',
      {
        argsObj: RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
        argsTuple: RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
        returns: RandomnessBeaconReturns['completeRequest(uint64,byte[80])void']
      }
    > &
    Record<
      'getCosts()(uint64,uint64)' | 'getCosts',
      {
        argsObj: RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
        argsTuple: RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
        /**
         * arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)
         */
        returns: RandomnessBeaconReturns['getCosts()(uint64,uint64)']
      }
    > &
    Record<
      'updateManager(address)void' | 'updateManager',
      {
        argsObj: RandomnessBeaconArgs['obj']['updateManager(address)void']
        argsTuple: RandomnessBeaconArgs['tuple']['updateManager(address)void']
        returns: RandomnessBeaconReturns['updateManager(address)void']
      }
    > &
    Record<
      'deleteManager()void' | 'deleteManager',
      {
        argsObj: RandomnessBeaconArgs['obj']['deleteManager()void']
        argsTuple: RandomnessBeaconArgs['tuple']['deleteManager()void']
        returns: RandomnessBeaconReturns['deleteManager()void']
      }
    > &
    Record<
      'manager()address' | 'manager',
      {
        argsObj: RandomnessBeaconArgs['obj']['manager()address']
        argsTuple: RandomnessBeaconArgs['tuple']['manager()address']
        /**
         * The current manager of this contract
         */
        returns: RandomnessBeaconReturns['manager()address']
      }
    > &
    Record<
      'pause()void' | 'pause',
      {
        argsObj: RandomnessBeaconArgs['obj']['pause()void']
        argsTuple: RandomnessBeaconArgs['tuple']['pause()void']
        returns: RandomnessBeaconReturns['pause()void']
      }
    > &
    Record<
      'unpause()void' | 'unpause',
      {
        argsObj: RandomnessBeaconArgs['obj']['unpause()void']
        argsTuple: RandomnessBeaconArgs['tuple']['unpause()void']
        returns: RandomnessBeaconReturns['unpause()void']
      }
    > &
    Record<
      'updatePauser(address)void' | 'updatePauser',
      {
        argsObj: RandomnessBeaconArgs['obj']['updatePauser(address)void']
        argsTuple: RandomnessBeaconArgs['tuple']['updatePauser(address)void']
        returns: RandomnessBeaconReturns['updatePauser(address)void']
      }
    > &
    Record<
      'pauser()address' | 'pauser',
      {
        argsObj: RandomnessBeaconArgs['obj']['pauser()address']
        argsTuple: RandomnessBeaconArgs['tuple']['pauser()address']
        /**
         * The current pauser
         */
        returns: RandomnessBeaconReturns['pauser()address']
      }
    >
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        publicKey: Uint8Array
        currentRequestId: bigint
        totalPendingRequests: bigint
        _manager: string
        _pauser: string
        paused: boolean
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        requests: Map<bigint | number, RandomnessRequest>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RandomnessBeaconSignatures = keyof RandomnessBeaconTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RandomnessBeaconNonVoidMethodSignatures = keyof RandomnessBeaconTypes['methods'] extends infer T
  ? T extends keyof RandomnessBeaconTypes['methods']
    ? MethodReturn<T> extends void
      ? never
      : T
    : never
  : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>
  }
>
/**
 * Maps a method signature from the RandomnessBeacon smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RandomnessBeaconSignatures> = RandomnessBeaconTypes['methods'][TSignature][
  | 'argsObj'
  | 'argsTuple']
/**
 * Maps a method signature from the RandomnessBeacon smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RandomnessBeaconSignatures> =
  RandomnessBeaconTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RandomnessBeaconTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = RandomnessBeaconTypes['state']['box']['keys']

/**
 * Defines supported create method params for this smart contract
 */
export type RandomnessBeaconCreateCallParams =
  | Expand<
      CallParams<
        | RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
        | RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
      > & { method: 'createApplication' } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >
  | Expand<
      CallParams<
        | RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
        | RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
      > & { method: 'createApplication(byte[32])void' } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >
/**
 * Defines supported update method params for this smart contract
 */
export type RandomnessBeaconUpdateCallParams =
  | Expand<
      CallParams<
        | RandomnessBeaconArgs['obj']['updateApplication()void']
        | RandomnessBeaconArgs['tuple']['updateApplication()void']
      > & {
        method: 'updateApplication'
      }
    >
  | Expand<
      CallParams<
        | RandomnessBeaconArgs['obj']['updateApplication()void']
        | RandomnessBeaconArgs['tuple']['updateApplication()void']
      > & {
        method: 'updateApplication()void'
      }
    >
/**
 * Defines supported delete method params for this smart contract
 */
export type RandomnessBeaconDeleteCallParams =
  | Expand<
      CallParams<
        | RandomnessBeaconArgs['obj']['deleteApplication()void']
        | RandomnessBeaconArgs['tuple']['deleteApplication()void']
      > & {
        method: 'deleteApplication'
      }
    >
  | Expand<
      CallParams<
        | RandomnessBeaconArgs['obj']['deleteApplication()void']
        | RandomnessBeaconArgs['tuple']['deleteApplication()void']
      > & {
        method: 'deleteApplication()void'
      }
    >
/**
 * Defines arguments required for the deploy method.
 */
export type RandomnessBeaconDeployParams = Expand<
  Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: RandomnessBeaconCreateCallParams
    /**
     * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    updateParams?: RandomnessBeaconUpdateCallParams
    /**
     * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    deleteParams?: RandomnessBeaconDeleteCallParams
  }
>

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RandomnessBeacon smart contract
 */
export abstract class RandomnessBeaconParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends RandomnessBeaconCreateCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case 'createApplication':
          case 'createApplication(byte[32])void':
            return RandomnessBeaconParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the RandomnessBeacon smart contract using the createApplication(byte[32])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
          | RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
        > &
          AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC },
      ): AppClientMethodCallParams & AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC } {
        return {
          ...params,
          method: 'createApplication(byte[32])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.publicKey],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends RandomnessBeaconUpdateCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return RandomnessBeaconParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the RandomnessBeacon smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updateApplication()void']
          | RandomnessBeaconArgs['tuple']['updateApplication()void']
        > &
          AppClientCompilationParams,
      ): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends RandomnessBeaconDeleteCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return RandomnessBeaconParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the RandomnessBeacon smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['deleteApplication()void']
          | RandomnessBeaconArgs['tuple']['deleteApplication()void']
        >,
      ): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createRequest(address,uint64,pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createRequest(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
      | RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createRequest(address,uint64,pay)uint64' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.requesterAddress, params.args.round, params.args.costsPayment],
    }
  }
  /**
   * Constructs a no op call for the cancelRequest(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelRequest(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
      | RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelRequest(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId],
    }
  }
  /**
   * Constructs a no op call for the completeRequest(uint64,byte[80])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static completeRequest(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
      | RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'completeRequest(uint64,byte[80])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId, params.args.proof],
    }
  }
  /**
   * Constructs a no op call for the getCosts()(uint64,uint64) ABI method
   *
  *
  Convenience function to get associated costs with using the beacon service

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCosts(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
      | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCosts()(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updateManager(address)void ABI method
   *
   * Update the manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateManager(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['updateManager(address)void']
      | RandomnessBeaconArgs['tuple']['updateManager(address)void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateManager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newManager],
    }
  }
  /**
   * Constructs a no op call for the deleteManager()void ABI method
   *
   * Delete the manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteManager(
    params: CallParams<
      RandomnessBeaconArgs['obj']['deleteManager()void'] | RandomnessBeaconArgs['tuple']['deleteManager()void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteManager()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the manager()address ABI method
   *
   * Convenience function to get the current manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static manager(
    params: CallParams<
      RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'manager()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the pause()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pause(
    params: CallParams<RandomnessBeaconArgs['obj']['pause()void'] | RandomnessBeaconArgs['tuple']['pause()void']> &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpause(
    params: CallParams<RandomnessBeaconArgs['obj']['unpause()void'] | RandomnessBeaconArgs['tuple']['unpause()void']> &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updatePauser(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePauser(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['updatePauser(address)void']
      | RandomnessBeaconArgs['tuple']['updatePauser(address)void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePauser(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args._newPauser],
    }
  }
  /**
   * Constructs a no op call for the pauser()address ABI method
   *
   * Convenience function to get the pauser
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauser(
    params: CallParams<
      RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pauser()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the RandomnessBeacon smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RandomnessBeaconFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RandomnessBeaconFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RandomnessBeaconClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {
    return new RandomnessBeaconClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the RandomnessBeacon smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RandomnessBeaconDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? RandomnessBeaconParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
          ? (params.createParams as RandomnessBeaconCreateCallParams & { args: Uint8Array[] })
          : undefined,
      updateParams: params.updateParams?.method
        ? RandomnessBeaconParamsFactory.update._resolveByMethod(params.updateParams)
        : params.updateParams
          ? (params.updateParams as RandomnessBeaconUpdateCallParams & { args: Uint8Array[] })
          : undefined,
      deleteParams: params.deleteParams?.method
        ? RandomnessBeaconParamsFactory.delete._resolveByMethod(params.deleteParams)
        : params.deleteParams
          ? (params.deleteParams as RandomnessBeaconDeleteCallParams & { args: Uint8Array[] })
          : undefined,
    })
    return { result: result.result, appClient: new RandomnessBeaconClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RandomnessBeacon smart contract using the createApplication(byte[32])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
          | RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC },
      ) => {
        return this.appFactory.params.create(RandomnessBeaconParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the RandomnessBeacon smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updateApplication()void']
          | RandomnessBeaconArgs['tuple']['updateApplication()void']
        > &
          AppClientCompilationParams = { args: [] },
      ) => {
        return this.appFactory.params.deployUpdate(RandomnessBeaconParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the RandomnessBeacon smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['deleteApplication()void']
          | RandomnessBeaconArgs['tuple']['deleteApplication()void']
        > = { args: [] },
      ) => {
        return this.appFactory.params.deployDelete(RandomnessBeaconParamsFactory.delete.deleteApplication(params))
      },
    },
  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RandomnessBeacon smart contract using the createApplication(byte[32])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
          | RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC },
      ) => {
        return this.appFactory.createTransaction.create(RandomnessBeaconParamsFactory.create.createApplication(params))
      },
    },
  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RandomnessBeacon smart contract using an ABI method call using the createApplication(byte[32])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['createApplication(byte[32])void']
          | RandomnessBeaconArgs['tuple']['createApplication(byte[32])void']
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
      ) => {
        const result = await this.appFactory.send.create(RandomnessBeaconParamsFactory.create.createApplication(params))
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as
              | undefined
              | RandomnessBeaconReturns['createApplication(byte[32])void'],
          },
          appClient: new RandomnessBeaconClient(result.appClient),
        }
      },
    },
  }
}
/**
 * A client to make calls to the RandomnessBeacon smart contract
 */
export class RandomnessBeaconClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RandomnessBeaconClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RandomnessBeacon app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RandomnessBeaconClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RandomnessBeaconNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined,
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs,
        )
      : undefined
  }

  /**
   * Returns a new `RandomnessBeaconClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>,
  ): Promise<RandomnessBeaconClient> {
    return new RandomnessBeaconClient(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }))
  }

  /**
   * Returns an `RandomnessBeaconClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<RandomnessBeaconClient> {
    return new RandomnessBeaconClient(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the RandomnessBeacon smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updateApplication()void']
          | RandomnessBeaconArgs['tuple']['updateApplication()void']
        > &
          AppClientCompilationParams = { args: [] },
      ) => {
        return this.appClient.params.update(RandomnessBeaconParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the RandomnessBeacon smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['deleteApplication()void']
          | RandomnessBeaconArgs['tuple']['deleteApplication()void']
        > = { args: [] },
      ) => {
        return this.appClient.params.delete(RandomnessBeaconParamsFactory.delete.deleteApplication(params))
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the RandomnessBeacon smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `createRequest(address,uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: a unique request ID to be used to identify the request
     */
    createRequest: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
        | RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.createRequest(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `cancelRequest(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelRequest: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
        | RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.cancelRequest(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `completeRequest(uint64,byte[80])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    completeRequest: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
        | RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.completeRequest(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `getCosts()(uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    *
    Convenience function to get associated costs with using the beacon service

     *
     * @param params The params for the smart contract call
     * @returns The call params: arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)
     */
    getCosts: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
        | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.getCosts(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateManager: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['updateManager(address)void']
        | RandomnessBeaconArgs['tuple']['updateManager(address)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.updateManager(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteManager: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['deleteManager()void'] | RandomnessBeaconArgs['tuple']['deleteManager()void']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.deleteManager(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `manager()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current manager of this contract
     */
    manager: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.manager(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `pause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pause: (
      params: CallParams<RandomnessBeaconArgs['obj']['pause()void'] | RandomnessBeaconArgs['tuple']['pause()void']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.pause(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `unpause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpause: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['unpause()void'] | RandomnessBeaconArgs['tuple']['unpause()void']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.unpause(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `updatePauser(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePauser: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['updatePauser(address)void']
        | RandomnessBeaconArgs['tuple']['updatePauser(address)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.updatePauser(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `pauser()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the pauser
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current pauser
     */
    pauser: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.params.call(RandomnessBeaconParamsFactory.pauser(params))
    },
  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the RandomnessBeacon smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updateApplication()void']
          | RandomnessBeaconArgs['tuple']['updateApplication()void']
        > &
          AppClientCompilationParams = { args: [] },
      ) => {
        return this.appClient.createTransaction.update(RandomnessBeaconParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the RandomnessBeacon smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['deleteApplication()void']
          | RandomnessBeaconArgs['tuple']['deleteApplication()void']
        > = { args: [] },
      ) => {
        return this.appClient.createTransaction.delete(RandomnessBeaconParamsFactory.delete.deleteApplication(params))
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the RandomnessBeacon smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `createRequest(address,uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: a unique request ID to be used to identify the request
     */
    createRequest: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
        | RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.createRequest(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `cancelRequest(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelRequest: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
        | RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.cancelRequest(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `completeRequest(uint64,byte[80])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    completeRequest: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
        | RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.completeRequest(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `getCosts()(uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    *
    Convenience function to get associated costs with using the beacon service

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)
     */
    getCosts: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
        | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.getCosts(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateManager: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['updateManager(address)void']
        | RandomnessBeaconArgs['tuple']['updateManager(address)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.updateManager(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteManager: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['deleteManager()void'] | RandomnessBeaconArgs['tuple']['deleteManager()void']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.deleteManager(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `manager()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current manager of this contract
     */
    manager: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.manager(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `pause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pause: (
      params: CallParams<RandomnessBeaconArgs['obj']['pause()void'] | RandomnessBeaconArgs['tuple']['pause()void']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.pause(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `unpause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpause: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['unpause()void'] | RandomnessBeaconArgs['tuple']['unpause()void']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.unpause(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `updatePauser(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePauser: (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['updatePauser(address)void']
        | RandomnessBeaconArgs['tuple']['updatePauser(address)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.updatePauser(params))
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `pauser()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the pauser
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current pauser
     */
    pauser: (
      params: CallParams<
        RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
      > & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(RandomnessBeaconParamsFactory.pauser(params))
    },
  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the RandomnessBeacon smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updateApplication()void']
          | RandomnessBeaconArgs['tuple']['updateApplication()void']
        > &
          AppClientCompilationParams &
          SendParams = { args: [] },
      ) => {
        const result = await this.appClient.send.update(RandomnessBeaconParamsFactory.update.updateApplication(params))
        return {
          ...result,
          return: result.return as unknown as undefined | RandomnessBeaconReturns['updateApplication()void'],
        }
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the RandomnessBeacon smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (
        params: CallParams<
          | RandomnessBeaconArgs['obj']['deleteApplication()void']
          | RandomnessBeaconArgs['tuple']['deleteApplication()void']
        > &
          SendParams = { args: [] },
      ) => {
        const result = await this.appClient.send.delete(RandomnessBeaconParamsFactory.delete.deleteApplication(params))
        return {
          ...result,
          return: result.return as unknown as undefined | RandomnessBeaconReturns['deleteApplication()void'],
        }
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the RandomnessBeacon smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `createRequest(address,uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: a unique request ID to be used to identify the request
     */
    createRequest: async (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
        | RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.createRequest(params))
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RandomnessBeaconReturns['createRequest(address,uint64,pay)uint64'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `cancelRequest(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelRequest: async (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
        | RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.cancelRequest(params))
      return {
        ...result,
        return: result.return as unknown as undefined | RandomnessBeaconReturns['cancelRequest(uint64)void'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `completeRequest(uint64,byte[80])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    completeRequest: async (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
        | RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.completeRequest(params))
      return {
        ...result,
        return: result.return as unknown as undefined | RandomnessBeaconReturns['completeRequest(uint64,byte[80])void'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `getCosts()(uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    *
    Convenience function to get associated costs with using the beacon service

     *
     * @param params The params for the smart contract call
     * @returns The call result: arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)
     */
    getCosts: async (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
        | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.getCosts(params))
      return {
        ...result,
        return: result.return as unknown as undefined | RandomnessBeaconReturns['getCosts()(uint64,uint64)'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateManager: async (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['updateManager(address)void']
        | RandomnessBeaconArgs['tuple']['updateManager(address)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.updateManager(params))
      return {
        ...result,
        return: result.return as unknown as undefined | RandomnessBeaconReturns['updateManager(address)void'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteManager: async (
      params: CallParams<
        RandomnessBeaconArgs['obj']['deleteManager()void'] | RandomnessBeaconArgs['tuple']['deleteManager()void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.deleteManager(params))
      return {
        ...result,
        return: result.return as unknown as undefined | RandomnessBeaconReturns['deleteManager()void'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `manager()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current manager of this contract
     */
    manager: async (
      params: CallParams<
        RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.manager(params))
      return { ...result, return: result.return as unknown as undefined | RandomnessBeaconReturns['manager()address'] }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `pause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pause: async (
      params: CallParams<RandomnessBeaconArgs['obj']['pause()void'] | RandomnessBeaconArgs['tuple']['pause()void']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.pause(params))
      return { ...result, return: result.return as unknown as undefined | RandomnessBeaconReturns['pause()void'] }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `unpause()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpause: async (
      params: CallParams<
        RandomnessBeaconArgs['obj']['unpause()void'] | RandomnessBeaconArgs['tuple']['unpause()void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.unpause(params))
      return { ...result, return: result.return as unknown as undefined | RandomnessBeaconReturns['unpause()void'] }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `updatePauser(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePauser: async (
      params: CallParams<
        | RandomnessBeaconArgs['obj']['updatePauser(address)void']
        | RandomnessBeaconArgs['tuple']['updatePauser(address)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.updatePauser(params))
      return {
        ...result,
        return: result.return as unknown as undefined | RandomnessBeaconReturns['updatePauser(address)void'],
      }
    },

    /**
     * Makes a call to the RandomnessBeacon smart contract using the `pauser()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the pauser
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current pauser
     */
    pauser: async (
      params: CallParams<
        RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.pauser(params))
      return { ...result, return: result.return as unknown as undefined | RandomnessBeaconReturns['pauser()address'] }
    },
  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RandomnessBeaconClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the RandomnessBeacon smart contract using the `getCosts()(uint64,uint64)` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  *
  Convenience function to get associated costs with using the beacon service

   *
   * @param params The params for the smart contract call
   * @returns The call result: arc4.Tuple<[txnFees, boxCost] - tuple of the required txn fees and box cost (that will be refunded)
   */
  async getCosts(
    params: CallParams<
      | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
      | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
    > = { args: [] },
  ) {
    const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.getCosts(params))
    return result.return as unknown as RandomnessBeaconReturns['getCosts()(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the RandomnessBeacon smart contract using the `manager()address` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Convenience function to get the current manager of this contract
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current manager of this contract
   */
  async manager(
    params: CallParams<
      RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
    > = { args: [] },
  ) {
    const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.manager(params))
    return result.return as unknown as RandomnessBeaconReturns['manager()address']
  }

  /**
   * Makes a readonly (simulated) call to the RandomnessBeacon smart contract using the `pauser()address` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Convenience function to get the pauser
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current pauser
   */
  async pauser(
    params: CallParams<
      RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
    > = { args: [] },
  ) {
    const result = await this.appClient.send.call(RandomnessBeaconParamsFactory.pauser(params))
    return result.return as unknown as RandomnessBeaconReturns['pauser()address']
  }

  /**
   * Methods to access state for the current RandomnessBeacon app
   */
  state = {
    /**
     * Methods to access global state for the current RandomnessBeacon app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          publicKey: result.publicKey,
          currentRequestId: result.currentRequestId,
          totalPendingRequests: result.totalPendingRequests,
          _manager: result._manager,
          _pauser: result._pauser,
          paused: result.paused,
        }
      },
      /**
       * Get the current value of the publicKey key in global state
       */
      publicKey: async (): Promise<Uint8Array | undefined> => {
        return (await this.appClient.state.global.getValue('publicKey')) as Uint8Array | undefined
      },
      /**
       * Get the current value of the currentRequestId key in global state
       */
      currentRequestId: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('currentRequestId')) as bigint | undefined
      },
      /**
       * Get the current value of the totalPendingRequests key in global state
       */
      totalPendingRequests: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('totalPendingRequests')) as bigint | undefined
      },
      /**
       * Get the current value of the _manager key in global state
       */
      _manager: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue('_manager')) as string | undefined
      },
      /**
       * Get the current value of the _pauser key in global state
       */
      _pauser: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue('_pauser')) as string | undefined
      },
      /**
       * Get the current value of the paused key in global state
       */
      paused: async (): Promise<boolean | undefined> => {
        return (await this.appClient.state.global.getValue('paused')) as boolean | undefined
      },
    },
    /**
     * Methods to access box state for the current RandomnessBeacon app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {}
      },
      /**
       * Get values from the requests map in box state
       */
      requests: {
        /**
         * Get all current values of the requests map in box state
         */
        getMap: async (): Promise<Map<bigint, RandomnessRequest>> => {
          return (await this.appClient.state.box.getMap('requests')) as Map<bigint, RandomnessRequest>
        },
        /**
         * Get a current value of the requests map by key from box state
         */
        value: async (key: bigint | number): Promise<RandomnessRequest | undefined> => {
          return (await this.appClient.state.box.getMapValue('requests', key)) as RandomnessRequest | undefined
        },
      },
    },
  }

  public newGroup(): RandomnessBeaconComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createRequest(address,uint64,pay)uint64 method call against the RandomnessBeacon contract
       */
      createRequest(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
          | RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.createRequest(params)),
        )
        resultMappers.push((v) => client.decodeReturnValue('createRequest(address,uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a cancelRequest(uint64)void method call against the RandomnessBeacon contract
       */
      cancelRequest(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
          | RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.cancelRequest(params)),
        )
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a completeRequest(uint64,byte[80])void method call against the RandomnessBeacon contract
       */
      completeRequest(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
          | RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.completeRequest(params)),
        )
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCosts()(uint64,uint64) method call against the RandomnessBeacon contract
       */
      getCosts(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
          | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getCosts(params)),
        )
        resultMappers.push((v) => client.decodeReturnValue('getCosts()(uint64,uint64)', v))
        return this
      },
      /**
       * Add a updateManager(address)void method call against the RandomnessBeacon contract
       */
      updateManager(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updateManager(address)void']
          | RandomnessBeaconArgs['tuple']['updateManager(address)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.updateManager(params)),
        )
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteManager()void method call against the RandomnessBeacon contract
       */
      deleteManager(
        params: CallParams<
          RandomnessBeaconArgs['obj']['deleteManager()void'] | RandomnessBeaconArgs['tuple']['deleteManager()void']
        > & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.deleteManager(params)),
        )
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a manager()address method call against the RandomnessBeacon contract
       */
      manager(
        params: CallParams<
          RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
        > & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.manager(params)))
        resultMappers.push((v) => client.decodeReturnValue('manager()address', v))
        return this
      },
      /**
       * Add a pause()void method call against the RandomnessBeacon contract
       */
      pause(
        params: CallParams<
          RandomnessBeaconArgs['obj']['pause()void'] | RandomnessBeaconArgs['tuple']['pause()void']
        > & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pause(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unpause()void method call against the RandomnessBeacon contract
       */
      unpause(
        params: CallParams<
          RandomnessBeaconArgs['obj']['unpause()void'] | RandomnessBeaconArgs['tuple']['unpause()void']
        > & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpause(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePauser(address)void method call against the RandomnessBeacon contract
       */
      updatePauser(
        params: CallParams<
          | RandomnessBeaconArgs['obj']['updatePauser(address)void']
          | RandomnessBeaconArgs['tuple']['updatePauser(address)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.updatePauser(params)),
        )
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pauser()address method call against the RandomnessBeacon contract
       */
      pauser(
        params: CallParams<
          RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
        > & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauser(params)))
        resultMappers.push((v) => client.decodeReturnValue('pauser()address', v))
        return this
      },
      get update() {
        return {
          updateApplication: (
            params: CallParams<
              | RandomnessBeaconArgs['obj']['updateApplication()void']
              | RandomnessBeaconArgs['tuple']['updateApplication()void']
            > &
              AppClientCompilationParams,
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)),
            )
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (
            params: CallParams<
              | RandomnessBeaconArgs['obj']['deleteApplication()void']
              | RandomnessBeaconArgs['tuple']['deleteApplication()void']
            >,
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)),
            )
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the RandomnessBeacon contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue,
          ),
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue,
          ),
        }
      },
    } as unknown as RandomnessBeaconComposer
  }
}
export type RandomnessBeaconComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createRequest(address,uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createRequest(
    params?: CallParams<
      | RandomnessBeaconArgs['obj']['createRequest(address,uint64,pay)uint64']
      | RandomnessBeaconArgs['tuple']['createRequest(address,uint64,pay)uint64']
    >,
  ): RandomnessBeaconComposer<
    [...TReturns, RandomnessBeaconReturns['createRequest(address,uint64,pay)uint64'] | undefined]
  >

  /**
   * Calls the cancelRequest(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelRequest(
    params?: CallParams<
      | RandomnessBeaconArgs['obj']['cancelRequest(uint64)void']
      | RandomnessBeaconArgs['tuple']['cancelRequest(uint64)void']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['cancelRequest(uint64)void'] | undefined]>

  /**
   * Calls the completeRequest(uint64,byte[80])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeRequest(
    params?: CallParams<
      | RandomnessBeaconArgs['obj']['completeRequest(uint64,byte[80])void']
      | RandomnessBeaconArgs['tuple']['completeRequest(uint64,byte[80])void']
    >,
  ): RandomnessBeaconComposer<
    [...TReturns, RandomnessBeaconReturns['completeRequest(uint64,byte[80])void'] | undefined]
  >

  /**
   * Calls the getCosts()(uint64,uint64) ABI method.
   *
  *
  Convenience function to get associated costs with using the beacon service

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCosts(
    params?: CallParams<
      | RandomnessBeaconArgs['obj']['getCosts()(uint64,uint64)']
      | RandomnessBeaconArgs['tuple']['getCosts()(uint64,uint64)']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['getCosts()(uint64,uint64)'] | undefined]>

  /**
   * Calls the updateManager(address)void ABI method.
   *
   * Update the manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManager(
    params?: CallParams<
      | RandomnessBeaconArgs['obj']['updateManager(address)void']
      | RandomnessBeaconArgs['tuple']['updateManager(address)void']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['updateManager(address)void'] | undefined]>

  /**
   * Calls the deleteManager()void ABI method.
   *
   * Delete the manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteManager(
    params?: CallParams<
      RandomnessBeaconArgs['obj']['deleteManager()void'] | RandomnessBeaconArgs['tuple']['deleteManager()void']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['deleteManager()void'] | undefined]>

  /**
   * Calls the manager()address ABI method.
   *
   * Convenience function to get the current manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  manager(
    params?: CallParams<
      RandomnessBeaconArgs['obj']['manager()address'] | RandomnessBeaconArgs['tuple']['manager()address']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['manager()address'] | undefined]>

  /**
   * Calls the pause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pause(
    params?: CallParams<RandomnessBeaconArgs['obj']['pause()void'] | RandomnessBeaconArgs['tuple']['pause()void']>,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['pause()void'] | undefined]>

  /**
   * Calls the unpause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpause(
    params?: CallParams<RandomnessBeaconArgs['obj']['unpause()void'] | RandomnessBeaconArgs['tuple']['unpause()void']>,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['unpause()void'] | undefined]>

  /**
   * Calls the updatePauser(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePauser(
    params?: CallParams<
      | RandomnessBeaconArgs['obj']['updatePauser(address)void']
      | RandomnessBeaconArgs['tuple']['updatePauser(address)void']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['updatePauser(address)void'] | undefined]>

  /**
   * Calls the pauser()address ABI method.
   *
   * Convenience function to get the pauser
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauser(
    params?: CallParams<
      RandomnessBeaconArgs['obj']['pauser()address'] | RandomnessBeaconArgs['tuple']['pauser()address']
    >,
  ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['pauser()address'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the RandomnessBeacon smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(
      params?: CallParams<
        | RandomnessBeaconArgs['obj']['updateApplication()void']
        | RandomnessBeaconArgs['tuple']['updateApplication()void']
      >,
    ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['updateApplication()void'] | undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the RandomnessBeacon smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      params?: CallParams<
        | RandomnessBeaconArgs['obj']['deleteApplication()void']
        | RandomnessBeaconArgs['tuple']['deleteApplication()void']
      >,
    ): RandomnessBeaconComposer<[...TReturns, RandomnessBeaconReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the RandomnessBeacon smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RandomnessBeaconComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RandomnessBeaconComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RandomnessBeaconComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(
    options: SkipSignaturesSimulateOptions,
  ): Promise<RandomnessBeaconComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(
    options: RawSimulateOptions,
  ): Promise<RandomnessBeaconComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RandomnessBeaconComposerResults<TReturns>>
}
export type RandomnessBeaconComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns
  }
>
